var searchIndex={};
searchIndex["kernel_hal_bare"] = {"doc":"Zircon HAL implementation for bare metal environment.","i":[[3,"Frame","kernel_hal_bare","",null,null],[5,"map_kernel","","Map kernel for the new page table.",null,[[]]],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["usize"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["usize"]]]],[5,"init","","Initialize the HAL.",null,[[]]],[0,"arch","","",null,null],[3,"PageTableImpl","kernel_hal_bare::arch","Page Table",null,null],[3,"MMUFlags","","",null,null],[11,"new","","Create a new `PageTable`.",0,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",0,[[["virtaddr"],["physaddr"],["mmuflags"],["self"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",0,[[["virtaddr"],["self"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",0,[[["virtaddr"],["self"],["mmuflags"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",0,[[["virtaddr"],["self"]],[["result",["physaddr"]],["physaddr"]]]],[18,"READ","","",1,null],[18,"WRITE","","",1,null],[18,"EXECUTE","","",1,null],[11,"empty","","Returns an empty set of flags",1,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",1,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",1,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",1,[[["usize"]],[["option",["mmuflags"]],["mmuflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",1,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",1,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",1,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",1,[[["mmuflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",1,[[["mmuflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"remove","","Removes the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",1,[[["self"],["mmuflags"],["bool"]]]],[11,"alloc","kernel_hal_bare","",2,[[],["option"]]],[11,"dealloc","","",2,[[["self"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","kernel_hal_bare::arch","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"eq","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"ne","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"cmp","","",1,[[["mmuflags"],["self"]],["ordering"]]],[11,"partial_cmp","","",1,[[["mmuflags"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"le","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"gt","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"ge","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"sub_assign","","Disables all flags enabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"not","","Returns the complement of this set of flags.",1,[[],["mmuflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"bitor_assign","","Adds the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"extend","","",1,[[["intoiterator"],["self"]]]],[11,"from_iter","","",1,[[["intoiterator"]],["mmuflags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["mmuflags"]]]],"p":[[3,"PageTableImpl"],[3,"MMUFlags"],[3,"Frame"]]};
searchIndex["kernel_hal_unix"] = {"doc":"","i":[[3,"MMUFlags","kernel_hal_unix","",null,null],[3,"Thread","","",null,null],[3,"Waker","","",null,null],[3,"PageTable","","Page Table",null,null],[3,"PhysFrame","","",null,null],[5,"set_user_fsbase","","Set FSBASE on user space.",null,[[["usize"]]]],[5,"switch_to_kernel","","Switch TLS from user to kernel.",null,[[]]],[5,"switch_to_user","","Switch TLS from kernel to user.",null,[[]]],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["usize"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["usize"]]]],[5,"serial_write","","Output a char to console.",null,[[["str"]]]],[5,"timer_now","","Get current time.",null,[[],["duration"]]],[5,"timer_set","","Set a new timer.",null,[[["box",["fnonce"]],["fnonce"],["duration"]]]],[5,"init","","Initialize the HAL.",null,[[]]],[18,"READ","","",0,null],[18,"WRITE","","",0,null],[18,"EXECUTE","","",0,null],[11,"empty","","Returns an empty set of flags",0,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",0,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",0,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",0,[[["usize"]],[["mmuflags"],["option",["mmuflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",0,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",0,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",0,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",0,[[["mmuflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",0,[[["mmuflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",0,[[["mmuflags"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",0,[[["mmuflags"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",0,[[["mmuflags"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",0,[[["mmuflags"],["self"],["bool"]]]],[11,"spawn","","",1,[[["arc",["usize"]],["usize"]],["self"]]],[11,"exit","","",1,[[]]],[11,"tls","","",1,[[],[["arc",["usize"]],["usize"]]]],[11,"park","","",1,[[]]],[11,"get_waker","","",1,[[],["waker"]]],[11,"wake","","",2,[[["self"]]]],[11,"new","","Create a new `PageTable`.",3,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",3,[[["mmuflags"],["self"],["usize"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",3,[[["self"],["usize"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",3,[[["mmuflags"],["self"],["usize"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",3,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"alloc","","",4,[[],["option"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"drop","","",4,[[["self"]]]],[11,"extend","","",0,[[["self"],["intoiterator"]]]],[11,"clone","","",0,[[["self"]],["mmuflags"]]],[11,"cmp","","",0,[[["self"],["mmuflags"]],["ordering"]]],[11,"eq","","",0,[[["self"],["mmuflags"]],["bool"]]],[11,"ne","","",0,[[["self"],["mmuflags"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["mmuflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["self"],["mmuflags"]],["bool"]]],[11,"le","","",0,[[["self"],["mmuflags"]],["bool"]]],[11,"gt","","",0,[[["self"],["mmuflags"]],["bool"]]],[11,"ge","","",0,[[["self"],["mmuflags"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"sub","","Returns the set difference of the two sets of flags.",0,[[["mmuflags"]],["mmuflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",0,[[["mmuflags"],["self"]]]],[11,"not","","Returns the complement of this set of flags.",0,[[],["mmuflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",0,[[["mmuflags"]],["mmuflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",0,[[["mmuflags"]],["mmuflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",0,[[["mmuflags"]],["mmuflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",0,[[["mmuflags"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",0,[[["mmuflags"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",0,[[["mmuflags"],["self"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"from_iter","","",0,[[["intoiterator"]],["mmuflags"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"MMUFlags"],[3,"Thread"],[3,"Waker"],[3,"PageTable"],[3,"PhysFrame"]]};
searchIndex["linux_loader"] = {"doc":"","i":[[5,"run","linux_loader","",null,[[["vec",["string"]],["string"]],[["process"],["arc",["process"]]]]],[8,"ElfExt","","",null,null],[10,"load_segment_size","","",0,[[["self"]],["usize"]]],[10,"get_symbol_address","","",0,[[["str"],["self"]],[["option",["u64"]],["u64"]]]],[10,"dynsym","","",0,[[["self"]],[["result",["str"]],["str"]]]],[10,"relocate","","",0,[[["self"],["usize"]],[["result",["str"]],["str"]]]],[8,"VmarExt","","",null,null],[10,"load_from_elf","","",1,[[["self"],["elffile"]],[["arc",["vmobjectpaged"]],["zxresult",["arc"]]]]]],"p":[[8,"ElfExt"],[8,"VmarExt"]]};
searchIndex["linux_syscall"] = {"doc":"Linux syscall implementations","i":[[3,"Syscall","linux_syscall","",null,null],[12,"thread","","",0,null],[11,"sys_open","","",0,[[["u8"],["userptr",["u8","in"]],["usize"],["self"],["in"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_openat","","",0,[[["in"],["userptr",["u8","in"]],["filedesc"],["usize"],["self"],["u8"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_close","","",0,[[["self"],["filedesc"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_dup2","","",0,[[["self"],["filedesc"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_read","","",0,[[["u8"],["userptr",["u8","out"]],["filedesc"],["usize"],["self"],["out"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_write","","",0,[[["in"],["userptr",["u8","in"]],["filedesc"],["usize"],["self"],["u8"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_pread","","",0,[[["u8"],["userptr",["u8","out"]],["filedesc"],["usize"],["self"],["out"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_pwrite","","",0,[[["in"],["userptr",["u8","in"]],["filedesc"],["usize"],["self"],["u8"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_readv","","",0,[[["iovec",["out"]],["filedesc"],["usize"],["userptr",["iovec","in"]],["self"],["in"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_writev","","",0,[[["userptr",["iovec","in"]],["filedesc"],["iovec",["in"]],["usize"],["self"],["in"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_lseek","","",0,[[["i64"],["filedesc"],["self"],["u8"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_arch_prctl","","",0,[[["usize"],["self"],["i32"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_exit_group","","Exit the current thread group (i.e. process)",0,[[["self"],["usize"]]]],[11,"sys_set_tid_address","","",0,[[["userptr",["u32","out"]],["u32"],["self"],["out"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_mmap","","",0,[[["filedesc"],["usize"],["self"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_mprotect","","",0,[[["self"],["usize"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"sys_munmap","","",0,[[["self"],["usize"]],[["syserror"],["result",["usize","syserror"]],["usize"]]]],[11,"syscall","","",0,[[["u32"],["self"]],["isize"]]],[8,"ProcessExt","","",null,null],[10,"create_linux","","",1,[[["str"],["arc"]],[["zxresult",["arc"]],["arc"]]]],[10,"lock_linux","","",1,[[["self"]],[["linuxprocess"],["mutexguard",["linuxprocess"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",0,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]]],"p":[[3,"Syscall"],[8,"ProcessExt"]]};
searchIndex["zircon_loader"] = {"doc":"","i":[[5,"run_userboot","zircon_loader","",null,[[["str"]],[["process"],["arc",["process"]]]]],[8,"ElfExt","","",null,null],[10,"load_segment_size","","",0,[[["self"]],["usize"]]],[10,"get_symbol_address","","",0,[[["str"],["self"]],[["option",["u64"]],["u64"]]]],[8,"VmarExt","","",null,null],[10,"load_from_elf","","",1,[[["self"],["elffile"]],[["zxresult",["arc"]],["arc",["vmobjectpaged"]]]]]],"p":[[8,"ElfExt"],[8,"VmarExt"]]};
searchIndex["zircon_object"] = {"doc":"Zircon kernel objects","i":[[4,"ZxError","zircon_object","Zircon statuses are signed 32 bit integers. The space of…",null,null],[13,"OK","","",0,null],[13,"INTERNAL","","The system encountered an otherwise unspecified error…",0,null],[13,"NOT_SUPPORTED","","The operation is not implemented, supported, or enabled.",0,null],[13,"NO_RESOURCES","","The system was not able to allocate some resource needed…",0,null],[13,"NO_MEMORY","","The system was not able to allocate memory needed for the…",0,null],[13,"INTERNAL_INTR_RETRY","","The system call was interrupted, but should be retried.…",0,null],[13,"INVALID_ARGS","","an argument is invalid, ex. null pointer",0,null],[13,"BAD_HANDLE","","A specified handle value does not refer to a handle.",0,null],[13,"WRONG_TYPE","","The subject of the operation is the wrong type to perform…",0,null],[13,"BAD_SYSCALL","","The specified syscall number is invalid.",0,null],[13,"OUT_OF_RANGE","","An argument is outside the valid range for this operation.",0,null],[13,"BUFFER_TOO_SMALL","","A caller provided buffer is too small for this operation.",0,null],[13,"BAD_STATE","","operation failed because the current state of the object…",0,null],[13,"TIMED_OUT","","The time limit for the operation elapsed before the…",0,null],[13,"SHOULD_WAIT","","The operation cannot be performed currently but…",0,null],[13,"CANCELED","","The in-progress operation (e.g. a wait) has been canceled.",0,null],[13,"PEER_CLOSED","","The operation failed because the remote end of the subject…",0,null],[13,"NOT_FOUND","","The requested entity is not found.",0,null],[13,"ALREADY_EXISTS","","An object with the specified identifier already exists.…",0,null],[13,"ALREADY_BOUND","","The operation failed because the named entity is already…",0,null],[13,"UNAVAILABLE","","The subject of the operation is currently unable to…",0,null],[13,"ACCESS_DENIED","","The caller did not have permission to perform the…",0,null],[13,"IO","","Otherwise unspecified error occurred during I/O.",0,null],[13,"IO_REFUSED","","The entity the I/O operation is being performed on…",0,null],[13,"IO_DATA_INTEGRITY","","The data in the operation failed an integrity check and is…",0,null],[13,"IO_DATA_LOSS","","The data in the operation is currently unavailable and may…",0,null],[13,"IO_NOT_PRESENT","","The device is no longer available (has been unplugged from…",0,null],[13,"IO_OVERRUN","","More data was received from the device than expected.…",0,null],[13,"IO_MISSED_DEADLINE","","An operation did not complete within the required…",0,null],[13,"IO_INVALID","","The data in the operation is invalid parameter or is out…",0,null],[13,"BAD_PATH","","Path name is too long.",0,null],[13,"NOT_DIR","","Object is not a directory or does not support directory…",0,null],[13,"NOT_FILE","","Object is not a regular file.",0,null],[13,"FILE_BIG","","This operation would cause a file to exceed a…",0,null],[13,"NO_SPACE","","Filesystem or device space is exhausted.",0,null],[13,"NOT_EMPTY","","Directory is not empty.",0,null],[13,"STOP","","Do not call again. Example: A notification callback will…",0,null],[13,"NEXT","","Advance to the next item. Example: A notification callback…",0,null],[13,"ASYNC","","Ownership of the item has moved to an asynchronous worker.",0,null],[13,"PROTOCOL_NOT_SUPPORTED","","Specified protocol is not supported.",0,null],[13,"ADDRESS_UNREACHABLE","","Host is unreachable.",0,null],[13,"ADDRESS_IN_USE","","Address is being used by someone else.",0,null],[13,"NOT_CONNECTED","","Socket is not connected.",0,null],[13,"CONNECTION_REFUSED","","Remote peer rejected the connection.",0,null],[13,"CONNECTION_RESET","","Connection was reset.",0,null],[13,"CONNECTION_ABORTED","","Connection was aborted.",0,null],[0,"hal","","Hardware Abstraction Layer",null,null],[3,"MMUFlags","zircon_object::hal","",null,null],[3,"Thread","","",null,null],[3,"Waker","","A handle for waking up thread.",null,null],[3,"PageTable","","Page Table",null,null],[3,"PhysFrame","","",null,null],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["usize"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["usize"]]]],[5,"serial_write","","Output a char to console.",null,[[["str"]]]],[5,"timer_now","","Get current time.",null,[[],["duration"]]],[5,"timer_set","","Set a new timer. After `deadline`, the `callback` will be…",null,[[["box",["fnonce"]],["fnonce"],["duration"]]]],[5,"set_user_fsbase","","Set FSBASE on user space.",null,[[["usize"]]]],[18,"READ","","",1,null],[18,"WRITE","","",1,null],[18,"EXECUTE","","",1,null],[11,"empty","","Returns an empty set of flags",1,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",1,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",1,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",1,[[["usize"]],[["mmuflags"],["option",["mmuflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",1,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",1,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",1,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",1,[[["mmuflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",1,[[["mmuflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",1,[[["mmuflags"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",1,[[["mmuflags"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",1,[[["mmuflags"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",1,[[["mmuflags"],["self"],["bool"]]]],[11,"spawn","","Spawn a new thread.",2,[[["arc",["threadobject"]],["threadobject"],["usize"]],["self"]]],[11,"exit","","Exit current thread.",2,[[]]],[11,"tls","","Get TLS variable of current thread passed from `spawn`.",2,[[],[["arc",["threadobject"]],["threadobject"]]]],[11,"park","","Blocks current thread.",2,[[]]],[11,"get_waker","","Get a waker of current thread.",2,[[],["waker"]]],[11,"wake","","Wake up related thread.",3,[[["self"]]]],[11,"new","","Create a new `PageTable`.",4,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",4,[[["mmuflags"],["self"],["usize"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",4,[[["self"],["usize"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",4,[[["mmuflags"],["self"],["usize"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",4,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"table_phys","","Get the physical address of root page table.",4,[[["self"]],["usize"]]],[11,"map_many","","",4,[[["mmuflags"],["usize"],["self"]],["result"]]],[11,"map_cont","","",4,[[["mmuflags"],["self"],["usize"]],["result"]]],[11,"unmap_cont","","",4,[[["self"],["usize"]],["result"]]],[11,"alloc","","",5,[[],["option"]]],[11,"addr","","",5,[[["self"]],["usize"]]],[0,"io","zircon_object","Objects for IO.",null,null],[3,"EventPair","zircon_object::io","Mutually signalable pair of events for concurrent…",null,null],[3,"Port","","Signaling and mailbox primitive",null,null],[3,"PortPacket","","",null,null],[12,"key","","",6,null],[12,"status","","",6,null],[12,"data","","",6,null],[3,"Timer","","An object that may be signaled at some point in the future",null,null],[4,"PortPacketPayload","","",null,null],[13,"Signal","","",7,null],[13,"User","","",7,null],[11,"create","","Create a pair of event.",8,[[]]],[11,"peer","","Get the peer event.",8,[[["self"]],[["arc"],["zxresult",["arc"]]]]],[11,"new","","Create a new `Port`.",9,[[],["arc"]]],[11,"push","","Push a `packet` into the port.",9,[[["portpacket"],["self"]]]],[11,"wait_async","","Asynchronous wait until at least one packet is available,…",9,[[["arc"]]]],[11,"new","","Create a new `Timer`.",10,[[],["arc"]]],[11,"set","","Starts a one-shot timer that will fire when `deadline`…",10,[[["arc"],["duration"]]]],[11,"cancel","","Cancel the pending timer started by `set`.",10,[[["self"]]]],[6,"Event","","Signalable event for concurrent programming",null,null],[0,"ipc","zircon_object","Objects for IPC.",null,null],[3,"Channel_","zircon_object::ipc","Bidirectional interprocess communication",null,null],[3,"MessagePacket","","",null,null],[12,"data","","",11,null],[12,"handles","","",11,null],[11,"create","","Create a channel and return a pair of its endpoints",12,[[]]],[11,"read","","Read a packet from the channel",12,[[["self"]],["zxresult"]]],[11,"write","","Write a packet to the channel",12,[[["self"],["t"]],["zxresult"]]],[6,"Channel","","",null,null],[0,"object","zircon_object","Kernel object basis.",null,null],[3,"Handle","zircon_object::object","A Handle is how a specific process refers to a specific…",null,null],[12,"object","","",13,null],[12,"rights","","",13,null],[3,"Rights","","Rights are associated with handles and convey privileges…",null,null],[3,"Signal","","Signals that waitable kernel objects expose to applications.",null,null],[3,"KObjectBase","","The base struct of a kernel object.",null,null],[12,"id","","",14,null],[3,"DummyObject","","Empty kernel object. Just for test.",null,null],[5,"wait_signal_many_async","","Asynchronous wait signal for multiple objects.",null,[[]]],[11,"new","","",13,[[["rights"],["arc",["kernelobject"]],["kernelobject"]],["self"]]],[18,"DUPLICATE","","Allows handle duplication via `zx_handle_duplicate()`.",15,null],[18,"TRANSFER","","Allows handle transfer via `zx_channel_write()`.",15,null],[18,"READ","","Allows reading of data from containers (channels, sockets,…",15,null],[18,"WRITE","","Allows writing of data to containers (channels, sockets,…",15,null],[18,"EXECUTE","","Allows mapping as executable if `Rights::MAP` is also…",15,null],[18,"MAP","","Allows mapping of a VM object into an address space.",15,null],[18,"GET_PROPERTY","","Allows property inspection via `zx_object_get_property()`.",15,null],[18,"SET_PROPERTY","","Allows property modification via `zx_object_set_property()`.",15,null],[18,"ENUMERATE","","Allows enumerating child objects via…",15,null],[18,"DESTROY","","Allows termination of task objects via `zx_task_kill()`.",15,null],[18,"SET_POLICY","","Allows policy modification via `zx_job_set_policy()`.",15,null],[18,"GET_POLICY","","Allows policy inspection via `zx_job_get_policy()`.",15,null],[18,"SIGNAL","","Allows use of `zx_object_signal()`.",15,null],[18,"SIGNAL_PEER","","Allows use of `zx_object_signal_peer()`.",15,null],[18,"WAIT","","Allows use of `zx_object_wait_one()`,…",15,null],[18,"INSPECT","","Allows inspection via `zx_object_get_info()`.",15,null],[18,"MANAGE_JOB","","Allows creation of processes, subjobs, etc.",15,null],[18,"MANAGE_PROCESS","","Allows creation of threads, etc.",15,null],[18,"MANAGE_THREAD","","Allows suspending/resuming threads, etc.",15,null],[18,"APPLY_PROFILE","","",15,null],[18,"SAME_RIGHTS","","",15,null],[18,"BASIC","","",15,null],[18,"IO","","",15,null],[18,"PROPERTY","","",15,null],[18,"POLICY","","",15,null],[18,"DEFAULT_CHANNEL","","",15,null],[18,"DEFAULT_PROCESS","","",15,null],[18,"DEFAULT_VMO","","",15,null],[18,"DEFAULT_VMAR","","",15,null],[18,"DEFAULT_JOB","","",15,null],[18,"DEFAULT_RESOURCE","","",15,null],[11,"empty","","Returns an empty set of flags",15,[[],["rights"]]],[11,"all","","Returns the set containing all flags.",15,[[],["rights"]]],[11,"bits","","Returns the raw value of the flags currently stored.",15,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",15,[[["u32"]],[["option",["rights"]],["rights"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",15,[[["u32"]],["rights"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",15,[[["u32"]],["rights"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",15,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",15,[[["self"],["rights"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",15,[[["self"],["rights"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",15,[[["self"],["rights"]]]],[11,"remove","","Removes the specified flags in-place.",15,[[["self"],["rights"]]]],[11,"toggle","","Toggles the specified flags in-place.",15,[[["self"],["rights"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",15,[[["bool"],["self"],["rights"]]]],[18,"READABLE","","",16,null],[18,"WRITABLE","","",16,null],[18,"PEER_CLOSED","","",16,null],[18,"SIGNALED","","",16,null],[18,"HANDLE_CLOSED","","",16,null],[18,"USER_ALL","","",16,null],[18,"CLOCK_STARTED","","",16,null],[18,"SOCKET_PEER_WRITE_DISABLED","","",16,null],[18,"SOCKET_WRITE_DISABLED","","",16,null],[18,"SOCKET_READ_THRESHOLD","","",16,null],[18,"SOCKET_WRITE_THRESHOLD","","",16,null],[18,"TASK_TERMINATED","","",16,null],[18,"JOB_TERMINATED","","",16,null],[18,"JOB_NO_JOBS","","",16,null],[18,"JOB_NO_PROCESSES","","",16,null],[18,"PROCESS_TERMINATED","","",16,null],[18,"THREAD_TERMINATED","","",16,null],[18,"THREAD_RUNNING","","",16,null],[18,"THREAD_SUSPENDED","","",16,null],[11,"empty","","Returns an empty set of flags",16,[[],["signal"]]],[11,"all","","Returns the set containing all flags.",16,[[],["signal"]]],[11,"bits","","Returns the raw value of the flags currently stored.",16,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",16,[[["u32"]],[["option",["signal"]],["signal"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",16,[[["u32"]],["signal"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",16,[[["u32"]],["signal"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",16,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",16,[[["self"],["signal"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",16,[[["self"],["signal"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",16,[[["self"],["signal"]]]],[11,"remove","","Removes the specified flags in-place.",16,[[["self"],["signal"]]]],[11,"toggle","","Toggles the specified flags in-place.",16,[[["self"],["signal"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",16,[[["self"],["signal"],["bool"]]]],[6,"HandleValue","","The value refers to a Handle in user space.",null,null],[6,"KoID","","The type of kernel object ID.",null,null],[6,"SignalHandler","","The type of kernel object signal handler.",null,null],[17,"INVALID_HANDLE","","Invalid handle value.",null,null],[8,"KernelObject","","Common interface of a kernel object.",null,null],[10,"id","","",17,[[["self"]],["koid"]]],[10,"type_name","","",17,[[["self"]],["str"]]],[10,"signal","","",17,[[["self"]],["signal"]]],[10,"signal_set","","",17,[[["self"],["signal"]]]],[10,"add_signal_callback","","",17,[[["self"],["signalhandler"]]]],[10,"wait_signal","","",17,[[["self"],["signal"]],["signal"]]],[11,"is","","Returns true if the trait object wraps an object of type…",17,[[["self"]],["bool"]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the…",17,[[["box"]],[["result",["box","box"]],["box"],["box"]]]],[11,"downcast_rc","","Returns an `Rc`-ed object from an `Rc`-ed trait object if…",17,[[["rc"]],[["rc"],["result",["rc","rc"]],["rc"]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object…",17,[[["self"]],[["__t"],["option"]]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait…",17,[[["self"]],[["__t"],["option"]]]],[11,"downcast_arc","","Returns an `Arc`-ed object from an `Arc`-ed trait object…",17,[[["arc"]],[["arc"],["result",["arc","arc"]],["arc"]]]],[11,"new","","Create a new kernel object base.",14,[[],["self"]]],[11,"with_signal","","Create a kernel object base with initial `signal`.",14,[[["signal"]],["self"]]],[11,"signal","","Get the signal status.",14,[[["self"]],["signal"]]],[11,"signal_change","","Change signal status: first `clear` then `set` indicated…",14,[[["self"],["signal"]]]],[11,"signal_set","","Assert `signal`.",14,[[["self"],["signal"]]]],[11,"signal_clear","","Deassert `signal`.",14,[[["self"],["signal"]]]],[11,"add_signal_callback","","Add `callback` for signal status changes.",14,[[["self"],["signalhandler"]]]],[11,"wait_signal","","Block until at least one `signal` assert. Return the…",14,[[["self"],["signal"]],["signal"]]],[11,"wait_signal_async","","Asynchronous wait for one of `signal`.",17,[[["arc"],["signal"]]]],[11,"send_signal_to_port_async","","Once one of the `signal` asserted, push a packet with…",17,[[["arc"],["arc"],["signal"],["u64"]]]],[11,"new","","",18,[[],["arc"]]],[0,"resource","zircon_object","",null,null],[3,"Resource","zircon_object::resource","Address space rights and accounting.",null,null],[4,"ResourceKind","","ResourceKind definition from…",null,null],[13,"MMIO","","",19,null],[13,"IRQ","","",19,null],[13,"IOPORT","","",19,null],[13,"HYPERVISOR","","",19,null],[13,"ROOT","","",19,null],[13,"VMEX","","",19,null],[13,"SMC","","",19,null],[13,"COUNT","","",19,null],[11,"create","","Create a new `Resource`.",20,[[["str"],["resourcekind"]],["arc"]]],[11,"validate","","",20,[[["self"],["resourcekind"]],["zxresult"]]],[0,"task","zircon_object","Objects for Task Management.",null,null],[3,"Job","zircon_object::task","Control a group of processes",null,null],[3,"JobPolicy","","",null,null],[3,"BasicPolicy","","",null,null],[12,"condition","","",21,null],[12,"action","","",21,null],[3,"TimerSlackPolicy","","",null,null],[3,"Process","","Process abstraction",null,null],[3,"Thread","","Runnable / computation entity",null,null],[12,"proc","","",22,null],[4,"SetPolicyOptions","","",null,null],[13,"Absolute","","Policy is applied for all conditions in policy or the call…",23,null],[13,"Relative","","Policy is applied for the conditions not specifically…",23,null],[4,"PolicyCondition","","",null,null],[13,"BadHandle","","A process under this job is attempting to issue a syscall…",24,null],[13,"WrongObject","","A process under this job is attempting to issue a syscall…",24,null],[13,"VmarWx","","A process under this job is attempting to map an address…",24,null],[13,"NewAny","","A special condition that stands for all of the above…",24,null],[13,"NewVMO","","A process under this job is attempting to create a new vm…",24,null],[13,"NewChannel","","A process under this job is attempting to create a new…",24,null],[13,"NewEvent","","A process under this job is attempting to create a new…",24,null],[13,"NewEventPair","","A process under this job is attempting to create a new…",24,null],[13,"NewPort","","A process under this job is attempting to create a new port.",24,null],[13,"NewSocket","","A process under this job is attempting to create a new…",24,null],[13,"NewFIFO","","A process under this job is attempting to create a new fifo.",24,null],[13,"NewTimer","","A process under this job is attempting to create a new…",24,null],[13,"NewProcess","","A process under this job is attempting to create a new…",24,null],[13,"NewProfile","","A process under this job is attempting to create a new…",24,null],[13,"AmbientMarkVMOExec","","A process under this job is attempting to use…",24,null],[4,"PolicyAction","","",null,null],[13,"Allow","","Allow condition.",25,null],[13,"Deny","","Prevent condition.",25,null],[13,"AllowException","","Generate an exception via the debug port. An exception…",25,null],[13,"DenyException","","Just like `AllowException`, but after resuming condition…",25,null],[13,"Kill","","Terminate the process.",25,null],[4,"TimerSlackDefaultMode","","",null,null],[13,"Center","","",26,null],[13,"Early","","",26,null],[13,"Late","","",26,null],[4,"ThreadStateKind","","",null,null],[13,"General","","",27,null],[13,"FloatPoint","","",27,null],[13,"Vector","","",27,null],[13,"Debug","","",27,null],[13,"SingleStep","","",27,null],[13,"FS","","",27,null],[13,"GS","","",27,null],[4,"ThreadState","","",null,null],[11,"root","","Create the root job.",28,[[],["arc"]]],[11,"create_child","","Create a new child job object.",28,[[["arc"],["u32"]],[["arc"],["zxresult",["arc"]]]]],[11,"policy","","Get the policy of the job.",28,[[["self"]],["jobpolicy"]]],[11,"set_policy_basic","","Sets one or more security and/or resource policies to an…",28,[[["setpolicyoptions"],["self"]],["zxresult"]]],[11,"set_policy_timer_slack","","",28,[[["setpolicyoptions"],["self"]]]],[11,"get_action","","Get the action of a policy `condition`.",29,[[["self"],["policycondition"]],[["option",["policyaction"]],["policyaction"]]]],[11,"apply","","Apply a basic policy.",29,[[["self"],["basicpolicy"]]]],[11,"merge","","Merge the policy with `parent`'s.",29,[[["self"]],["self"]]],[11,"create","","Create a new process in the `job`.",30,[[["str"],["u32"],["arc"]],[["arc"],["zxresult",["arc"]]]]],[11,"create_with_ext","","Create a new process with extension info.",30,[[["str"],["arc"]],[["arc"],["zxresult",["arc"]]]]],[11,"start","","Start the first `thread` in the process.",30,[[["handle"],["usize"],["self"],["arc"]],["zxresult"]]],[11,"exit","","",30,[[["i64"],["self"]]]],[11,"check_policy","","Check whether `condition` is allowed in the parent job's…",30,[[["self"],["policycondition"]],["zxresult"]]],[11,"ext","","Get the extension.",30,[[["self"]],["box"]]],[11,"vmar","","Get the `VmAddressRegion` of the process.",30,[[["self"]],[["vmaddressregion"],["arc",["vmaddressregion"]]]]],[11,"add_handle","","Add a handle to the process",30,[[["self"],["handle"]],["handlevalue"]]],[11,"remove_handle","","Remove a handle from the process",30,[[["handlevalue"],["self"]],["zxresult"]]],[11,"dup_handle","","Duplicate a handle with new `rights`, return the new…",30,[[["handlevalue"],["self"],["rights"]],[["zxresult",["handlevalue"]],["handlevalue"]]]],[11,"get_object_with_rights","","Get the kernel object corresponding to this…",30,[[["handlevalue"],["self"],["rights"]],[["zxresult",["arc"]],["arc"]]]],[11,"get_object","","Get the kernel object corresponding to this `handle_value`",30,[[["handlevalue"],["self"]],[["zxresult",["arc"]],["arc"]]]],[11,"validate_resource","","Try to get Resource and validate it",30,[[["handlevalue"],["self"],["resourcekind"]],["zxresult"]]],[11,"get_vmo_with_rights","","Equal to `get_object_with_rights<dyn VMObject>`.",30,[[["handlevalue"],["self"],["rights"]],[["zxresult",["arc"]],["arc",["vmobject"]]]]],[11,"create","","Create a new thread.",22,[[["str"],["u32"],["arc"]],[["arc"],["zxresult",["arc"]]]]],[11,"current","","Get current `Thread` object.",22,[[],["arc"]]],[11,"start","","Start execution on the thread.",22,[[["arc"],["usize"]],["zxresult"]]],[11,"exit","","Terminate the current running thread.",22,[[]]],[11,"read_state","","Read one aspect of thread state.",22,[[["threadstatekind"],["self"]],[["threadstate"],["zxresult",["threadstate"]]]]],[11,"write_state","","Write one aspect of thread state.",22,[[["self"],["threadstate"]],["zxresult"]]],[8,"Task","","Task (Thread, Process, or Job)",null,null],[10,"kill","","Kill the task.",31,[[["self"]],["zxresult"]]],[10,"suspend","","Suspend the task. Currently only thread or process handles…",31,[[["self"]],["zxresult"]]],[10,"create_exception_channel","","Create an exception channel on the task.",31,[[["self"],["u32"]],[["channel"],["zxresult",["channel"]]]]],[10,"resume_from_exception","","Resume the task from a previously caught exception.",31,[[["self"],["port"],["u32"]],["zxresult"]]],[0,"vm","zircon_object","Objects for Virtual Memory Management.",null,null],[3,"VmAddressRegion","zircon_object::vm","Virtual Memory Address Regions",null,null],[3,"VmMapping","","Virtual Memory Mapping",null,null],[3,"VMObjectPaged","","The main VM object type, holding a list of pages.",null,null],[3,"VMObjectPhysical","","VMO representing a physical range of memory.",null,null],[5,"pages","","How many pages the `size` needs.",null,[[["usize"]],["usize"]]],[11,"new_root","","Create a new root VMAR.",32,[[],["arc"]]],[11,"create_child_at","","Create a child VMAR at given `offset`.",32,[[["arc"],["usize"]],[["arc"],["zxresult",["arc"]]]]],[11,"create_child","","Create a child VMAR at `offset` with `len`.",32,[[["arc"],["usize"],["option",["usize"]]],[["arc"],["zxresult",["arc"]]]]],[11,"map_at","","Map the `vmo` into this VMAR at given `offset`.",32,[[["mmuflags"],["arc",["vmobject"]],["usize"],["vmobject"],["self"]],["zxresult"]]],[11,"map","","Map the `vmo` into this VMAR.",32,[[["mmuflags"],["usize"],["arc",["vmobject"]],["vmobject"],["option",["usize"]],["self"]],[["zxresult",["virtaddr"]],["virtaddr"]]]],[11,"unmap","","Unmaps all VMO mappings and destroys all sub-regions…",32,[[["virtaddr"],["self"],["usize"]],["zxresult"]]],[11,"protect","","",32,[[["self"]]]],[11,"destroy","","Unmap all mappings within the VMAR, and destroy all…",32,[[["arc"]],["zxresult"]]],[11,"table_phys","","Get physical address of the underlying page table.",32,[[["self"]],["physaddr"]]],[11,"addr","","Get start address of this VMAR.",32,[[["self"]],["usize"]]],[11,"is_dead","","",32,[[["self"]],["bool"]]],[11,"is_alive","","",32,[[["self"]],["bool"]]],[11,"new","","Create a new VMO backing on physical memory allocated in…",33,[[["usize"]],["arc"]]],[11,"new","","Create a new VMO representing a piece of contiguous…",34,[[["physaddr"],["usize"]],["arc"]]],[6,"PhysAddr","","Physical Address",null,null],[6,"VirtAddr","","Virtual Address",null,null],[17,"PAGE_SIZE","","Size of a page",null,null],[8,"VMObject","","Virtual Memory Objects",null,null],[10,"read","","Read memory to `buf` from VMO at `offset`.",35,[[["self"],["usize"]]]],[10,"write","","Write memory from `buf` to VMO at `offset`.",35,[[["self"],["usize"]]]],[10,"len","","Get the length of VMO.",35,[[["self"]],["usize"]]],[10,"set_len","","Set the length of VMO.",35,[[["self"],["usize"]]]],[10,"map_to","","Map physical memory to `page_table`.",35,[[["pagetable"],["mmuflags"],["usize"],["virtaddr"],["self"]]]],[11,"unmap_from","","Unmap physical memory from `page_table`.",35,[[["pagetable"],["usize"],["virtaddr"],["self"]]]],[10,"commit","","Commit allocating physical memory.",35,[[["self"],["usize"]]]],[6,"ZxResult","zircon_object","The type returned by kernel objects methods.",null,null],[14,"impl_kobject","","Macro to auto implement `KernelObject` trait.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"into_any","","",0,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",0,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]],[11,"into_any_arc","","",0,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::hal","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"into_any","","",1,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",1,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",1,[[["self"]],["any"]]],[11,"as_any_mut","","",1,[[["self"]],["any"]]],[11,"into_any_arc","","",1,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_any","","",2,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",2,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",2,[[["self"]],["any"]]],[11,"as_any_mut","","",2,[[["self"]],["any"]]],[11,"into_any_arc","","",2,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"into_any","","",3,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",3,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",3,[[["self"]],["any"]]],[11,"as_any_mut","","",3,[[["self"]],["any"]]],[11,"into_any_arc","","",3,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"into_any","","",4,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",4,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",4,[[["self"]],["any"]]],[11,"as_any_mut","","",4,[[["self"]],["any"]]],[11,"into_any_arc","","",4,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"into_any","","",5,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",5,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",5,[[["self"]],["any"]]],[11,"as_any_mut","","",5,[[["self"]],["any"]]],[11,"into_any_arc","","",5,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::io","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"into_any","","",8,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",8,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",8,[[["self"]],["any"]]],[11,"as_any_mut","","",8,[[["self"]],["any"]]],[11,"into_any_arc","","",8,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"into_any","","",9,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",9,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",9,[[["self"]],["any"]]],[11,"as_any_mut","","",9,[[["self"]],["any"]]],[11,"into_any_arc","","",9,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"into_any","","",6,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",6,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",6,[[["self"]],["any"]]],[11,"as_any_mut","","",6,[[["self"]],["any"]]],[11,"into_any_arc","","",6,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"into_any","","",10,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",10,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",10,[[["self"]],["any"]]],[11,"as_any_mut","","",10,[[["self"]],["any"]]],[11,"into_any_arc","","",10,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"into_any","","",7,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",7,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",7,[[["self"]],["any"]]],[11,"as_any_mut","","",7,[[["self"]],["any"]]],[11,"into_any_arc","","",7,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::ipc","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"into_any","","",12,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",12,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",12,[[["self"]],["any"]]],[11,"as_any_mut","","",12,[[["self"]],["any"]]],[11,"into_any_arc","","",12,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"into_any","","",11,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",11,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",11,[[["self"]],["any"]]],[11,"as_any_mut","","",11,[[["self"]],["any"]]],[11,"into_any_arc","","",11,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::object","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"into_any","","",13,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",13,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",13,[[["self"]],["any"]]],[11,"as_any_mut","","",13,[[["self"]],["any"]]],[11,"into_any_arc","","",13,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"into_any","","",15,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",15,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",15,[[["self"]],["any"]]],[11,"as_any_mut","","",15,[[["self"]],["any"]]],[11,"into_any_arc","","",15,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"into_any","","",16,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",16,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",16,[[["self"]],["any"]]],[11,"as_any_mut","","",16,[[["self"]],["any"]]],[11,"into_any_arc","","",16,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"into_any","","",14,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",14,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",14,[[["self"]],["any"]]],[11,"as_any_mut","","",14,[[["self"]],["any"]]],[11,"into_any_arc","","",14,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"into_any","","",18,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",18,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",18,[[["self"]],["any"]]],[11,"as_any_mut","","",18,[[["self"]],["any"]]],[11,"into_any_arc","","",18,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::resource","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"into_any","","",20,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",20,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",20,[[["self"]],["any"]]],[11,"as_any_mut","","",20,[[["self"]],["any"]]],[11,"into_any_arc","","",20,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"into_any","","",19,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",19,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",19,[[["self"]],["any"]]],[11,"as_any_mut","","",19,[[["self"]],["any"]]],[11,"into_any_arc","","",19,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::task","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"into_any","","",28,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",28,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",28,[[["self"]],["any"]]],[11,"as_any_mut","","",28,[[["self"]],["any"]]],[11,"into_any_arc","","",28,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"into_any","","",29,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",29,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",29,[[["self"]],["any"]]],[11,"as_any_mut","","",29,[[["self"]],["any"]]],[11,"into_any_arc","","",29,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"into_any","","",21,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",21,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",21,[[["self"]],["any"]]],[11,"as_any_mut","","",21,[[["self"]],["any"]]],[11,"into_any_arc","","",21,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"into_any","","",36,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",36,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",36,[[["self"]],["any"]]],[11,"as_any_mut","","",36,[[["self"]],["any"]]],[11,"into_any_arc","","",36,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"into_any","","",30,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",30,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",30,[[["self"]],["any"]]],[11,"as_any_mut","","",30,[[["self"]],["any"]]],[11,"into_any_arc","","",30,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"into_any","","",22,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",22,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",22,[[["self"]],["any"]]],[11,"as_any_mut","","",22,[[["self"]],["any"]]],[11,"into_any_arc","","",22,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"into_any","","",23,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",23,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",23,[[["self"]],["any"]]],[11,"as_any_mut","","",23,[[["self"]],["any"]]],[11,"into_any_arc","","",23,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"into_any","","",24,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",24,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",24,[[["self"]],["any"]]],[11,"as_any_mut","","",24,[[["self"]],["any"]]],[11,"into_any_arc","","",24,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"into_any","","",25,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",25,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",25,[[["self"]],["any"]]],[11,"as_any_mut","","",25,[[["self"]],["any"]]],[11,"into_any_arc","","",25,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"into_any","","",26,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",26,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",26,[[["self"]],["any"]]],[11,"as_any_mut","","",26,[[["self"]],["any"]]],[11,"into_any_arc","","",26,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"into_any","","",27,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",27,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",27,[[["self"]],["any"]]],[11,"as_any_mut","","",27,[[["self"]],["any"]]],[11,"into_any_arc","","",27,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"into","","",37,[[],["u"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"into_any","","",37,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",37,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",37,[[["self"]],["any"]]],[11,"as_any_mut","","",37,[[["self"]],["any"]]],[11,"into_any_arc","","",37,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::vm","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"into_any","","",32,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",32,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",32,[[["self"]],["any"]]],[11,"as_any_mut","","",32,[[["self"]],["any"]]],[11,"into_any_arc","","",32,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"into_any","","",38,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",38,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",38,[[["self"]],["any"]]],[11,"as_any_mut","","",38,[[["self"]],["any"]]],[11,"into_any_arc","","",38,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"into_any","","",33,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",33,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",33,[[["self"]],["any"]]],[11,"as_any_mut","","",33,[[["self"]],["any"]]],[11,"into_any_arc","","",33,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"into_any","","",34,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",34,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",34,[[["self"]],["any"]]],[11,"as_any_mut","","",34,[[["self"]],["any"]]],[11,"into_any_arc","","",34,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"id","zircon_object::io","",8,[[["self"]],["koid"]]],[11,"type_name","","",8,[[["self"]],["str"]]],[11,"signal","","",8,[[["self"]],["signal"]]],[11,"signal_set","","",8,[[["self"],["signal"]]]],[11,"add_signal_callback","","",8,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",8,[[["self"],["signal"]],["signal"]]],[11,"id","","",9,[[["self"]],["koid"]]],[11,"type_name","","",9,[[["self"]],["str"]]],[11,"signal","","",9,[[["self"]],["signal"]]],[11,"signal_set","","",9,[[["self"],["signal"]]]],[11,"add_signal_callback","","",9,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",9,[[["self"],["signal"]],["signal"]]],[11,"id","","",10,[[["self"]],["koid"]]],[11,"type_name","","",10,[[["self"]],["str"]]],[11,"signal","","",10,[[["self"]],["signal"]]],[11,"signal_set","","",10,[[["self"],["signal"]]]],[11,"add_signal_callback","","",10,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",10,[[["self"],["signal"]],["signal"]]],[11,"id","zircon_object","",39,[[["self"]],["koid"]]],[11,"type_name","","",39,[[["self"]],["str"]]],[11,"signal","","",39,[[["self"]],["signal"]]],[11,"signal_set","","",39,[[["self"],["signal"]]]],[11,"add_signal_callback","","",39,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",39,[[["self"],["signal"]],["signal"]]],[11,"id","zircon_object::object","",18,[[["self"]],["koid"]]],[11,"type_name","","",18,[[["self"]],["str"]]],[11,"signal","","",18,[[["self"]],["signal"]]],[11,"signal_set","","",18,[[["self"],["signal"]]]],[11,"add_signal_callback","","",18,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",18,[[["self"],["signal"]],["signal"]]],[11,"id","zircon_object::resource","",20,[[["self"]],["koid"]]],[11,"type_name","","",20,[[["self"]],["str"]]],[11,"signal","","",20,[[["self"]],["signal"]]],[11,"signal_set","","",20,[[["self"],["signal"]]]],[11,"add_signal_callback","","",20,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",20,[[["self"],["signal"]],["signal"]]],[11,"id","zircon_object::task","",28,[[["self"]],["koid"]]],[11,"type_name","","",28,[[["self"]],["str"]]],[11,"signal","","",28,[[["self"]],["signal"]]],[11,"signal_set","","",28,[[["self"],["signal"]]]],[11,"add_signal_callback","","",28,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",28,[[["self"],["signal"]],["signal"]]],[11,"id","","",30,[[["self"]],["koid"]]],[11,"type_name","","",30,[[["self"]],["str"]]],[11,"signal","","",30,[[["self"]],["signal"]]],[11,"signal_set","","",30,[[["self"],["signal"]]]],[11,"add_signal_callback","","",30,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",30,[[["self"],["signal"]],["signal"]]],[11,"id","","",22,[[["self"]],["koid"]]],[11,"type_name","","",22,[[["self"]],["str"]]],[11,"signal","","",22,[[["self"]],["signal"]]],[11,"signal_set","","",22,[[["self"],["signal"]]]],[11,"add_signal_callback","","",22,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",22,[[["self"],["signal"]],["signal"]]],[11,"id","zircon_object::vm","",32,[[["self"]],["koid"]]],[11,"type_name","","",32,[[["self"]],["str"]]],[11,"signal","","",32,[[["self"]],["signal"]]],[11,"signal_set","","",32,[[["self"],["signal"]]]],[11,"add_signal_callback","","",32,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",32,[[["self"],["signal"]],["signal"]]],[11,"id","","",33,[[["self"]],["koid"]]],[11,"type_name","","",33,[[["self"]],["str"]]],[11,"signal","","",33,[[["self"]],["signal"]]],[11,"signal_set","","",33,[[["self"],["signal"]]]],[11,"add_signal_callback","","",33,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",33,[[["self"],["signal"]],["signal"]]],[11,"id","","",34,[[["self"]],["koid"]]],[11,"type_name","","",34,[[["self"]],["str"]]],[11,"signal","","",34,[[["self"]],["signal"]]],[11,"signal_set","","",34,[[["self"],["signal"]]]],[11,"add_signal_callback","","",34,[[["self"],["signalhandler"]]]],[11,"wait_signal","","",34,[[["self"],["signal"]],["signal"]]],[11,"read","","",33,[[["self"],["usize"]]]],[11,"write","","",33,[[["self"],["usize"]]]],[11,"len","","",33,[[["self"]],["usize"]]],[11,"set_len","","",33,[[["self"],["usize"]]]],[11,"map_to","","",33,[[["pagetable"],["mmuflags"],["usize"],["self"]]]],[11,"commit","","",33,[[["self"],["usize"]]]],[11,"read","","",34,[[["self"],["usize"]]]],[11,"write","","",34,[[["self"],["usize"]]]],[11,"len","","",34,[[["self"]],["usize"]]],[11,"set_len","","",34,[[["self"],["usize"]]]],[11,"map_to","","",34,[[["pagetable"],["mmuflags"],["usize"],["self"]]]],[11,"commit","","",34,[[["self"],["usize"]]]],[11,"drop","zircon_object::hal","",5,[[["self"]]]],[11,"drop","zircon_object::io","",8,[[["self"]]]],[11,"drop","zircon_object::ipc","",12,[[["self"]]]],[11,"drop","zircon_object::vm","",38,[[["self"]]]],[11,"fmt","zircon_object","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","zircon_object::hal","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::io","",8,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",9,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object","",39,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::object","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::resource","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::task","",28,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",22,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","zircon_object::vm","",32,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",33,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",34,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"sub","zircon_object::hal","Returns the set difference of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"sub","zircon_object::object","Returns the set difference of the two sets of flags.",15,[[["rights"]],["rights"]]],[11,"sub","","Returns the set difference of the two sets of flags.",16,[[["signal"]],["signal"]]],[11,"eq","zircon_object","",0,[[["self"],["zxerror"]],["bool"]]],[11,"eq","zircon_object::hal","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"ne","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"eq","zircon_object::io","",6,[[["self"],["portpacket"]],["bool"]]],[11,"ne","","",6,[[["self"],["portpacket"]],["bool"]]],[11,"eq","","",7,[[["self"],["portpacketpayload"]],["bool"]]],[11,"ne","","",7,[[["self"],["portpacketpayload"]],["bool"]]],[11,"eq","zircon_object::object","",15,[[["self"],["rights"]],["bool"]]],[11,"ne","","",15,[[["self"],["rights"]],["bool"]]],[11,"eq","","",16,[[["signal"],["self"]],["bool"]]],[11,"ne","","",16,[[["signal"],["self"]],["bool"]]],[11,"eq","zircon_object::resource","",19,[[["self"],["resourcekind"]],["bool"]]],[11,"eq","zircon_object::task","",25,[[["policyaction"],["self"]],["bool"]]],[11,"cmp","zircon_object::hal","",1,[[["self"],["mmuflags"]],["ordering"]]],[11,"cmp","zircon_object::object","",15,[[["self"],["rights"]],["ordering"]]],[11,"cmp","","",16,[[["signal"],["self"]],["ordering"]]],[11,"partial_cmp","zircon_object::hal","",1,[[["self"],["mmuflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"le","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"gt","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"ge","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"partial_cmp","zircon_object::object","",15,[[["self"],["rights"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",15,[[["self"],["rights"]],["bool"]]],[11,"le","","",15,[[["self"],["rights"]],["bool"]]],[11,"gt","","",15,[[["self"],["rights"]],["bool"]]],[11,"ge","","",15,[[["self"],["rights"]],["bool"]]],[11,"partial_cmp","","",16,[[["signal"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",16,[[["signal"],["self"]],["bool"]]],[11,"le","","",16,[[["signal"],["self"]],["bool"]]],[11,"gt","","",16,[[["signal"],["self"]],["bool"]]],[11,"ge","","",16,[[["signal"],["self"]],["bool"]]],[11,"sub_assign","zircon_object::hal","Disables all flags enabled in the set.",1,[[["mmuflags"],["self"]]]],[11,"sub_assign","zircon_object::object","Disables all flags enabled in the set.",15,[[["self"],["rights"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",16,[[["self"],["signal"]]]],[11,"not","zircon_object::hal","Returns the complement of this set of flags.",1,[[],["mmuflags"]]],[11,"not","zircon_object::object","Returns the complement of this set of flags.",15,[[],["rights"]]],[11,"not","","Returns the complement of this set of flags.",16,[[],["signal"]]],[11,"bitand","zircon_object::hal","Returns the intersection between the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitand","zircon_object::object","Returns the intersection between the two sets of flags.",15,[[["rights"]],["rights"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",16,[[["signal"]],["signal"]]],[11,"bitor","zircon_object::hal","Returns the union of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitor","zircon_object::object","Returns the union of the two sets of flags.",15,[[["rights"]],["rights"]]],[11,"bitor","","Returns the union of the two sets of flags.",16,[[["signal"]],["signal"]]],[11,"bitxor","zircon_object::hal","Returns the left flags, but with all the right flags…",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitxor","zircon_object::object","Returns the left flags, but with all the right flags…",15,[[["rights"]],["rights"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",16,[[["signal"]],["signal"]]],[11,"bitand_assign","zircon_object::hal","Disables all flags disabled in the set.",1,[[["mmuflags"],["self"]]]],[11,"bitand_assign","zircon_object::object","Disables all flags disabled in the set.",15,[[["self"],["rights"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",16,[[["self"],["signal"]]]],[11,"bitor_assign","zircon_object::hal","Adds the set of flags.",1,[[["mmuflags"],["self"]]]],[11,"bitor_assign","zircon_object::object","Adds the set of flags.",15,[[["self"],["rights"]]]],[11,"bitor_assign","","Adds the set of flags.",16,[[["self"],["signal"]]]],[11,"bitxor_assign","zircon_object::hal","Toggles the set of flags.",1,[[["mmuflags"],["self"]]]],[11,"bitxor_assign","zircon_object::object","Toggles the set of flags.",15,[[["self"],["rights"]]]],[11,"bitxor_assign","","Toggles the set of flags.",16,[[["self"],["signal"]]]],[11,"hash","zircon_object::hal","",1,[[["self"],["__h"]]]],[11,"hash","zircon_object::object","",15,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"extend","zircon_object::hal","",1,[[["intoiterator"],["self"]]]],[11,"extend","zircon_object::object","",15,[[["self"],["intoiterator"]]]],[11,"extend","","",16,[[["self"],["intoiterator"]]]],[11,"from_iter","zircon_object::hal","",1,[[["intoiterator"]],["mmuflags"]]],[11,"from_iter","zircon_object::object","",15,[[["intoiterator"]],["rights"]]],[11,"from_iter","","",16,[[["intoiterator"]],["signal"]]],[11,"try_from","","",15,[[["u32"]],["zxresult"]]],[11,"fmt","zircon_object::hal","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::object","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::hal","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::object","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::hal","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::object","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::hal","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","zircon_object::object","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"clone","zircon_object","",0,[[["self"]],["zxerror"]]],[11,"clone","zircon_object::hal","",1,[[["self"]],["mmuflags"]]],[11,"clone","zircon_object::object","",13,[[["self"]],["handle"]]],[11,"clone","","",15,[[["self"]],["rights"]]],[11,"clone","","",16,[[["self"]],["signal"]]],[11,"clone","zircon_object::resource","",19,[[["self"]],["resourcekind"]]],[11,"clone","zircon_object::task","",29,[[["self"]],["jobpolicy"]]],[11,"clone","","",23,[[["self"]],["setpolicyoptions"]]],[11,"clone","","",21,[[["self"]],["basicpolicy"]]],[11,"clone","","",24,[[["self"]],["policycondition"]]],[11,"clone","","",25,[[["self"]],["policyaction"]]],[11,"clone","","",36,[[["self"]],["timerslackpolicy"]]],[11,"clone","","",26,[[["self"]],["timerslackdefaultmode"]]],[11,"clone","","",27,[[["self"]],["threadstatekind"]]],[11,"default","zircon_object::ipc","",11,[[],["messagepacket"]]],[11,"default","zircon_object::object","",16,[[],["signal"]]],[11,"default","","",14,[[],["self"]]],[11,"default","zircon_object::task","",29,[[],["jobpolicy"]]],[11,"unmap_from","zircon_object::vm","Unmap physical memory from `page_table`.",35,[[["pagetable"],["usize"],["virtaddr"],["self"]]]]],"p":[[4,"ZxError"],[3,"MMUFlags"],[3,"Thread"],[3,"Waker"],[3,"PageTable"],[3,"PhysFrame"],[3,"PortPacket"],[4,"PortPacketPayload"],[3,"EventPair"],[3,"Port"],[3,"Timer"],[3,"MessagePacket"],[3,"Channel_"],[3,"Handle"],[3,"KObjectBase"],[3,"Rights"],[3,"Signal"],[8,"KernelObject"],[3,"DummyObject"],[4,"ResourceKind"],[3,"Resource"],[3,"BasicPolicy"],[3,"Thread"],[4,"SetPolicyOptions"],[4,"PolicyCondition"],[4,"PolicyAction"],[4,"TimerSlackDefaultMode"],[4,"ThreadStateKind"],[3,"Job"],[3,"JobPolicy"],[3,"Process"],[8,"Task"],[3,"VmAddressRegion"],[3,"VMObjectPaged"],[3,"VMObjectPhysical"],[8,"VMObject"],[3,"TimerSlackPolicy"],[4,"ThreadState"],[3,"VmMapping"],[6,"Channel"]]};
searchIndex["zircon_syscall"] = {"doc":"Zircon syscall implementations","i":[[3,"Syscall","zircon_syscall","",null,null],[12,"thread","","",0,null],[11,"sys_channel_read","","Read a message from a channel.",0,[[["handlevalue"],["u32"],["userptr",["handlevalue","out"]],["userptr",["u8","out"]],["userptr",["u32","out"]],["out"],["self"],["u8"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_debug_write","","",0,[[["userptr",["u8","in"]],["u8"],["usize"],["self"],["in"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_debuglog_create","","",0,[[["out"],["usize"],["userptr",["handlevalue","out"]],["self"],["handlevalue"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_debuglog_write","","",0,[[["userptr",["u8","in"]],["u32"],["in"],["u8"],["usize"],["self"],["handlevalue"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_handle_duplicate","","",0,[[["out"],["u32"],["userptr",["handlevalue","out"]],["self"],["handlevalue"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_handle_close","","",0,[[["self"],["handlevalue"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_handle_close_many","","",0,[[["handlevalue"],["userptr",["handlevalue","in"]],["usize"],["self"],["in"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_process_create","","",0,[[["u8"],["u32"],["handlevalue"],["userptr",["handlevalue","out"]],["userptr",["u8","in"]],["out"],["usize"],["self"],["in"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_process_exit","","",0,[[["i64"],["self"]]]],[11,"sys_vmar_allocate","","",0,[[["u32"],["userptr",["handlevalue","out"]],["u64"],["out"],["usize"],["userptr",["usize","out"]],["self"],["handlevalue"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_vmo_create","","",0,[[["out"],["u32"],["userptr",["handlevalue","out"]],["handlevalue"],["self"],["u64"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_vmo_read","","",0,[[["out"],["userptr",["u8","out"]],["u8"],["u64"],["usize"],["self"],["handlevalue"]],[["usize"],["zxresult",["usize"]]]]],[11,"syscall","","",0,[[["u32"],["self"]],["isize"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",0,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]]],"p":[[3,"Syscall"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);