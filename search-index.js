var searchIndex={};
searchIndex["kernel_hal"] = {"doc":"Hardware Abstraction Layer","i":[[3,"Thread","kernel_hal","",null,null],[3,"Waker","","A handle for waking up thread.",null,null],[3,"PageTable","","Page Table",null,null],[3,"PhysFrame","","",null,null],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["physaddr"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["physaddr"]]]],[5,"serial_write","","Output a char to console.",null,[[["str"]]]],[5,"timer_now","","Get current time.",null,[[],["duration"]]],[5,"timer_set","","Set a new timer. After `deadline`, the `callback` will be…",null,[[["box",["fnonce"]],["fnonce"],["duration"]]]],[0,"defs","","",null,null],[3,"GeneralRegs","kernel_hal::defs","",null,null],[12,"rax","","",0,null],[12,"rbx","","",0,null],[12,"rcx","","",0,null],[12,"rdx","","",0,null],[12,"rsi","","",0,null],[12,"rdi","","",0,null],[12,"rbp","","",0,null],[12,"rsp","","",0,null],[12,"r8","","",0,null],[12,"r9","","",0,null],[12,"r10","","",0,null],[12,"r11","","",0,null],[12,"r12","","",0,null],[12,"r13","","",0,null],[12,"r14","","",0,null],[12,"r15","","",0,null],[12,"rip","","",0,null],[12,"rflags","","",0,null],[12,"fs_base","","",0,null],[12,"gs_base","","",0,null],[3,"MMUFlags","","",null,null],[6,"PhysAddr","","",null,null],[6,"VirtAddr","","",null,null],[17,"PAGE_SIZE","","",null,null],[11,"new_fn","","",0,[[["usize"]],["self"]]],[11,"clone","","",0,[[["self"],["usize"]],["self"]]],[18,"READ","","",1,null],[18,"WRITE","","",1,null],[18,"EXECUTE","","",1,null],[11,"empty","","Returns an empty set of flags",1,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",1,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",1,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",1,[[["usize"]],[["mmuflags"],["option",["mmuflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",1,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",1,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",1,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",1,[[["self"],["mmuflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",1,[[["self"],["mmuflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"remove","","Removes the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",1,[[["self"],["mmuflags"],["bool"]]]],[11,"spawn","kernel_hal","Spawn a new thread.",2,[[["generalregs"],["arc"]],["self"]]],[11,"exit","","Exit current thread.",2,[[]]],[11,"tls","","Get TLS variable of current thread passed from `spawn`.",2,[[],["arc"]]],[11,"park","","Blocks current thread.",2,[[]]],[11,"get_waker","","Get a waker of current thread.",2,[[],["waker"]]],[11,"wake","","Wake up related thread.",3,[[["self"]]]],[11,"new","","Create a new `PageTable`.",4,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",4,[[["mmuflags"],["virtaddr"],["self"],["physaddr"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",4,[[["virtaddr"],["self"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",4,[[["virtaddr"],["self"],["mmuflags"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",4,[[["virtaddr"],["self"]],[["result",["physaddr"]],["physaddr"]]]],[11,"table_phys","","Get the physical address of root page table.",4,[[["self"]],["physaddr"]]],[11,"map_many","","",4,[[["mmuflags"],["virtaddr"],["self"]],["result"]]],[11,"map_cont","","",4,[[["usize"],["mmuflags"],["virtaddr"],["self"],["physaddr"]],["result"]]],[11,"unmap_cont","","",4,[[["virtaddr"],["self"],["usize"]],["result"]]],[11,"alloc","","",5,[[],["option"]]],[11,"addr","","",5,[[["self"]],["physaddr"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","kernel_hal::defs","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"eq","","",0,[[["generalregs"],["self"]],["bool"]]],[11,"ne","","",0,[[["generalregs"],["self"]],["bool"]]],[11,"eq","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"ne","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"cmp","","",1,[[["mmuflags"],["self"]],["ordering"]]],[11,"partial_cmp","","",1,[[["mmuflags"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"le","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"gt","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"ge","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"sub_assign","","Disables all flags enabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"not","","Returns the complement of this set of flags.",1,[[],["mmuflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"bitor_assign","","Adds the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"drop","kernel_hal","",5,[[["self"]]]],[11,"hash","kernel_hal::defs","",1,[[["self"],["__h"]]]],[11,"extend","","",1,[[["intoiterator"],["self"]]]],[11,"from_iter","","",1,[[["intoiterator"]],["mmuflags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["generalregs"]]],[11,"clone","","",1,[[["self"]],["mmuflags"]]],[11,"default","","",0,[[],["generalregs"]]]],"p":[[3,"GeneralRegs"],[3,"MMUFlags"],[3,"Thread"],[3,"Waker"],[3,"PageTable"],[3,"PhysFrame"]]};
searchIndex["kernel_hal_bare"] = {"doc":"Zircon HAL implementation for bare metal environment.","i":[[3,"Frame","kernel_hal_bare","",null,null],[5,"map_kernel","","Map kernel for the new page table.",null,[[]]],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["physaddr"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["physaddr"]]]],[5,"init","","Initialize the HAL.",null,[[]]],[0,"arch","","",null,null],[3,"PageTableImpl","kernel_hal_bare::arch","Page Table",null,null],[11,"new","","Create a new `PageTable`.",0,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",0,[[["virtaddr"],["self"],["physaddr"],["mmuflags"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",0,[[["self"],["virtaddr"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",0,[[["self"],["virtaddr"],["mmuflags"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",0,[[["self"],["virtaddr"]],[["result",["physaddr"]],["physaddr"]]]],[11,"alloc","kernel_hal_bare","",1,[[],["option"]]],[11,"dealloc","","",1,[[["self"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","kernel_hal_bare::arch","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]]],"p":[[3,"PageTableImpl"],[3,"Frame"]]};
searchIndex["kernel_hal_unix"] = {"doc":"","i":[[3,"GeneralRegs","kernel_hal_unix","",null,null],[12,"rax","","",0,null],[12,"rbx","","",0,null],[12,"rcx","","",0,null],[12,"rdx","","",0,null],[12,"rsi","","",0,null],[12,"rdi","","",0,null],[12,"rbp","","",0,null],[12,"rsp","","",0,null],[12,"r8","","",0,null],[12,"r9","","",0,null],[12,"r10","","",0,null],[12,"r11","","",0,null],[12,"r12","","",0,null],[12,"r13","","",0,null],[12,"r14","","",0,null],[12,"r15","","",0,null],[12,"rip","","",0,null],[12,"rflags","","",0,null],[12,"fs_base","","",0,null],[12,"gs_base","","",0,null],[3,"MMUFlags","","",null,null],[6,"PhysAddr","","",null,null],[6,"VirtAddr","","",null,null],[17,"PAGE_SIZE","","",null,null],[3,"Thread","","",null,null],[3,"Waker","","",null,null],[3,"PageTable","","Page Table",null,null],[3,"PhysFrame","","",null,null],[5,"switch_to_kernel","","Switch TLS from user to kernel.",null,[[]]],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["physaddr"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["physaddr"]]]],[5,"serial_write","","Output a char to console.",null,[[["str"]]]],[5,"timer_now","","Get current time.",null,[[],["duration"]]],[5,"timer_set","","Set a new timer.",null,[[["box",["fnonce"]],["fnonce"],["duration"]]]],[5,"init","","Initialize the HAL.",null,[[]]],[5,"syscall_entry","","",null,null],[11,"spawn","","",1,[[["arc",["usize"]],["usize"],["generalregs"]],["self"]]],[11,"exit","","",1,[[]]],[11,"tls","","",1,[[],[["arc",["usize"]],["usize"]]]],[11,"park","","",1,[[]]],[11,"get_waker","","",1,[[],["waker"]]],[11,"wake","","",2,[[["self"]]]],[11,"new","","Create a new `PageTable`.",3,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",3,[[["virtaddr"],["physaddr"],["mmuflags"],["self"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",3,[[["virtaddr"],["self"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",3,[[["virtaddr"],["self"],["mmuflags"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",3,[[["virtaddr"],["self"]],[["physaddr"],["result",["physaddr"]]]]],[11,"alloc","","",4,[[],["option"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"extend","","",5,[[["self"],["t"]]]],[11,"cmp","","",5,[[["mmuflags"],["self"]],["ordering"]]],[11,"partial_cmp","","",5,[[["mmuflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",5,[[["mmuflags"],["self"]],["bool"]]],[11,"le","","",5,[[["mmuflags"],["self"]],["bool"]]],[11,"gt","","",5,[[["mmuflags"],["self"]],["bool"]]],[11,"ge","","",5,[[["mmuflags"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",5,[[["mmuflags"]],["mmuflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",5,[[["mmuflags"]],["mmuflags"]]],[11,"default","","",0,[[],["generalregs"]]],[11,"eq","","",5,[[["mmuflags"],["self"]],["bool"]]],[11,"ne","","",5,[[["mmuflags"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["generalregs"]],["bool"]]],[11,"ne","","",0,[[["self"],["generalregs"]],["bool"]]],[11,"not","","Returns the complement of this set of flags.",5,[[],["mmuflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["mmuflags"]],["mmuflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["self"],["mmuflags"]]]],[11,"from_iter","","",5,[[["t"]],["mmuflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["mmuflags"]],["mmuflags"]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"sub_assign","","Disables all flags enabled in the set.",5,[[["self"],["mmuflags"]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["self"],["mmuflags"]]]],[11,"clone","","",5,[[["self"]],["mmuflags"]]],[11,"clone","","",0,[[["self"]],["generalregs"]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["self"],["mmuflags"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"drop","","",4,[[["self"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"new_fn","","",0,[[["usize"]],["generalregs"]]],[11,"clone","","",0,[[["self"],["usize"]],["generalregs"]]],[18,"READ","","",5,null],[18,"WRITE","","",5,null],[18,"EXECUTE","","",5,null],[11,"empty","","Returns an empty set of flags",5,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",5,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",5,[[["usize"]],[["mmuflags"],["option",["mmuflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",5,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",5,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",5,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",5,[[["mmuflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",5,[[["mmuflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["self"],["mmuflags"]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["self"],["mmuflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["self"],["mmuflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",5,[[["self"],["mmuflags"],["bool"]]]]],"p":[[3,"GeneralRegs"],[3,"Thread"],[3,"Waker"],[3,"PageTable"],[3,"PhysFrame"],[3,"MMUFlags"]]};
searchIndex["linux_loader"] = {"doc":"","i":[[5,"run","linux_loader","",null,[[["str"],["vec",["string"]],["string"],["arc",["filesystem"]],["filesystem"]],[["arc",["process"]],["process"]]]]],"p":[]};
searchIndex["linux_syscall"] = {"doc":"Linux syscall implementations","i":[[8,"FileSystem","linux_syscall","Abstract file system",null,null],[10,"sync","","Sync all data to the storage",0,[[["self"]],[["fserror"],["result",["fserror"]]]]],[10,"root_inode","","Get the root INode of the file system",0,[[["self"]],[["arc",["inode"]],["inode"]]]],[10,"info","","Get the file system information",0,[[["self"]],["fsinfo"]]],[8,"INode","","Abstract file system object such as file or directory.",null,null],[10,"read_at","","Read bytes at `offset` into `buf`, return the number of…",1,[[["self"],["usize"]],[["fserror"],["result",["usize","fserror"]],["usize"]]]],[10,"write_at","","Write bytes at `offset` from `buf`, return the number of…",1,[[["self"],["usize"]],[["fserror"],["result",["usize","fserror"]],["usize"]]]],[10,"poll","","Poll the events, return a bitmap of events.",1,[[["self"]],[["result",["pollstatus","fserror"]],["pollstatus"],["fserror"]]]],[11,"metadata","","Get metadata of the INode",1,[[["self"]],[["result",["metadata","fserror"]],["fserror"],["metadata"]]]],[11,"set_metadata","","Set metadata of the INode",1,[[["metadata"],["self"]],[["fserror"],["result",["fserror"]]]]],[11,"sync_all","","Sync all data and metadata",1,[[["self"]],[["fserror"],["result",["fserror"]]]]],[11,"sync_data","","Sync data (not include metadata)",1,[[["self"]],[["fserror"],["result",["fserror"]]]]],[11,"resize","","Resize the file",1,[[["self"],["usize"]],[["fserror"],["result",["fserror"]]]]],[11,"create","","Create a new INode in the directory",1,[[["str"],["u32"],["filetype"],["self"]],[["result",["arc","fserror"]],["arc",["inode"]],["fserror"]]]],[11,"create2","","Create a new INode in the directory, with a data field for…",1,[[["str"],["u32"],["usize"],["filetype"],["self"]],[["result",["arc","fserror"]],["arc",["inode"]],["fserror"]]]],[11,"link","","Create a hard link `name` to `other`",1,[[["str"],["arc"],["self"]],[["fserror"],["result",["fserror"]]]]],[11,"unlink","","Delete a hard link `name`",1,[[["str"],["self"]],[["fserror"],["result",["fserror"]]]]],[11,"move_","","Move INode `self/old_name` to `target/new_name`. If…",1,[[["str"],["arc"],["self"]],[["fserror"],["result",["fserror"]]]]],[11,"find","","Find the INode `name` in the directory",1,[[["str"],["self"]],[["result",["arc","fserror"]],["arc",["inode"]],["fserror"]]]],[11,"get_entry","","Get the name of directory entry",1,[[["self"],["usize"]],[["fserror"],["result",["string","fserror"]],["string"]]]],[11,"io_control","","Control device",1,[[["u32"],["self"],["usize"]],[["fserror"],["result",["fserror"]]]]],[11,"fs","","Get the file system of the INode",1,[[["self"]],[["arc",["filesystem"]],["filesystem"]]]],[10,"as_any_ref","","This is used to implement dynamics cast. Simply return…",1,[[["self"]],["any"]]],[3,"LinuxElfLoader","","Linux ELF Program Loader.",null,null],[12,"syscall_entry","","",2,null],[12,"stack_pages","","",2,null],[12,"root_inode","","",2,null],[3,"Syscall","","",null,null],[12,"thread","","",3,null],[12,"syscall_entry","","",3,null],[12,"regs","","",3,null],[11,"load","","",2,[[["arc"],["vec",["string"]],["string"],["self"]],[["result",["syserror"]],["syserror"]]]],[11,"sys_getcwd","","",3,[[["u8"],["userptr",["u8","out"]],["usize"],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_chdir","","",3,[[["u8"],["userptr",["u8","in"]],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_mkdir","","",3,[[["u8"],["userptr",["u8","in"]],["usize"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_mkdirat","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["usize"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_rmdir","","",3,[[["u8"],["userptr",["u8","in"]],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_getdents64","","",3,[[["filedesc"],["userptr",["u8","out"]],["u8"],["usize"],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_link","","",3,[[["u8"],["userptr",["u8","in"]],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_linkat","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["usize"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_unlink","","",3,[[["u8"],["userptr",["u8","in"]],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_unlinkat","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["usize"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_rename","","",3,[[["u8"],["userptr",["u8","in"]],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_renameat","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_readlink","","",3,[[["u8"],["userptr",["u8","in"]],["userptr",["u8","out"]],["out"],["usize"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_readlinkat","","",3,[[["userptr",["u8","in"]],["self"],["u8"],["filedesc"],["userptr",["u8","out"]],["usize"],["out"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_open","","",3,[[["u8"],["userptr",["u8","in"]],["usize"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_openat","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["usize"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_close","","",3,[[["filedesc"],["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_dup2","","",3,[[["filedesc"],["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_read","","",3,[[["filedesc"],["userptr",["u8","out"]],["u8"],["usize"],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_write","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["usize"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_pread","","",3,[[["filedesc"],["userptr",["u8","out"]],["u8"],["usize"],["u64"],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_pwrite","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["usize"],["u64"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_readv","","",3,[[["filedesc"],["iovec",["out"]],["usize"],["userptr",["iovec","in"]],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_writev","","",3,[[["filedesc"],["in"],["usize"],["iovec",["in"]],["self"],["userptr",["iovec","in"]]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_lseek","","",3,[[["filedesc"],["i64"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_truncate","","",3,[[["u8"],["userptr",["u8","in"]],["usize"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_ftruncate","","",3,[[["filedesc"],["self"],["usize"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_sendfile","","",3,[[["filedesc"],["inout"],["usize"],["userptr",["u64","inout"]],["self"],["u64"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_copy_file_range","","",3,[[["filedesc"],["inout"],["usize"],["userptr",["u64","inout"]],["self"],["u64"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_sync","","",3,[[["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_fsync","","",3,[[["filedesc"],["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_fdatasync","","",3,[[["filedesc"],["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_ioctl","","",3,[[["filedesc"],["usize"],["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_fcntl","","",3,[[["filedesc"],["usize"],["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_access","","",3,[[["u8"],["userptr",["u8","in"]],["usize"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_faccessat","","",3,[[["filedesc"],["in"],["userptr",["u8","in"]],["usize"],["self"],["u8"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_lstat","","",3,[[["u8"],["userptr",["u8","in"]],["stat"],["userptr",["stat","out"]],["out"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_fstat","","",3,[[["filedesc"],["stat"],["userptr",["stat","out"]],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_fstatat","","",3,[[["userptr",["u8","in"]],["stat"],["userptr",["stat","out"]],["u8"],["out"],["filedesc"],["usize"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_stat","","",3,[[["u8"],["userptr",["u8","in"]],["stat"],["userptr",["stat","out"]],["out"],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_arch_prctl","","",3,[[["self"],["usize"],["i32"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_uname","","",3,[[["u8"],["userptr",["u8","out"]],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_clone","","Create a new thread in the current process. The new…",3,[[["userptr",["u32","out"]],["u32"],["usize"],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_wait4","","Wait for the process exit. Return the PID. Store exit code…",3,[[["u32"],["i32"],["userptr",["i32","out"]],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_execve","","Replaces the current ** process ** with a new process image",3,[[["u8"],["userptr",["u8","in"]],["userptr",["userptr","in"]],["self"],["in"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_gettid","","Get the current thread ID.",3,[[["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_getpid","","Get the current process ID.",3,[[["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_getppid","","Get the parent process ID.",3,[[["self"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_exit","","Exit the current thread",3,[[["self"],["i32"]]]],[11,"sys_exit_group","","Exit the current thread group (i.e. process)",3,[[["self"],["usize"]]]],[11,"sys_set_tid_address","","",3,[[["userptr",["u32","out"]],["u32"],["self"],["out"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_mmap","","",3,[[["filedesc"],["usize"],["self"],["u64"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_mprotect","","",3,[[["self"],["usize"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"sys_munmap","","",3,[[["self"],["usize"]],[["result",["usize","syserror"]],["usize"],["syserror"]]]],[11,"syscall","","",3,[[["self"],["u32"]],["isize"]]],[8,"INodeExt","","",null,null],[10,"read_as_vec","","",4,[[["self"]],[["vec",["u8"]],["result",["vec"]]]]],[8,"ProcessExt","","",null,null],[10,"create_linux","","",5,[[["arc",["filesystem"]],["filesystem"],["arc"]],[["zxresult",["arc"]],["arc"]]]],[10,"lock_linux","","",5,[[["self"]],[["linuxprocess"],["mutexguard",["linuxprocess"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_any_arc","","",2,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",2,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",2,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",2,[[["self"]],["any"]]],[11,"as_any_mut","","",2,[[["self"]],["any"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"into_any_arc","","",3,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",3,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",3,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",3,[[["self"]],["any"]]],[11,"as_any_mut","","",3,[[["self"]],["any"]]],[11,"read_as_vec","","",1,[[["self"]],[["vec",["u8"]],["result",["vec"]]]]],[11,"downcast_ref","","Downcast the INode to specific struct",1,[[["self"]],[["option"],["t"]]]],[11,"list","","Get all directory entries as a Vec",1,[[["self"]],[["vec",["string"]],["fserror"],["result",["vec","fserror"]]]]],[11,"lookup","","Lookup path from current INode, and do not follow symlinks",1,[[["str"],["self"]],[["result",["arc","fserror"]],["arc",["inode"]],["fserror"]]]],[11,"lookup_follow","","Lookup path from current INode, and follow symlinks at…",1,[[["str"],["self"],["usize"]],[["result",["arc","fserror"]],["arc",["inode"]],["fserror"]]]]],"p":[[8,"FileSystem"],[8,"INode"],[3,"LinuxElfLoader"],[3,"Syscall"],[8,"INodeExt"],[8,"ProcessExt"]]};
searchIndex["zircon_loader"] = {"doc":"","i":[[5,"run_userboot","zircon_loader","",null,[[["str"]],[["arc",["process"]],["process"]]]],[8,"ElfExt","","",null,null],[10,"load_segment_size","","",0,[[["self"]],["usize"]]],[10,"get_symbol_address","","",0,[[["str"],["self"]],[["option",["u64"]],["u64"]]]],[8,"VmarExt","","",null,null],[10,"load_from_elf","","",1,[[["elffile"],["self"]],[["arc",["vmobjectpaged"]],["zxresult",["arc"]]]]]],"p":[[8,"ElfExt"],[8,"VmarExt"]]};
searchIndex["zircon_object"] = {"doc":"Zircon kernel objects","i":[[4,"ZxError","zircon_object","Zircon statuses are signed 32 bit integers. The space of…",null,null],[13,"OK","","",0,null],[13,"INTERNAL","","The system encountered an otherwise unspecified error…",0,null],[13,"NOT_SUPPORTED","","The operation is not implemented, supported, or enabled.",0,null],[13,"NO_RESOURCES","","The system was not able to allocate some resource needed…",0,null],[13,"NO_MEMORY","","The system was not able to allocate memory needed for the…",0,null],[13,"INTERNAL_INTR_RETRY","","The system call was interrupted, but should be retried.…",0,null],[13,"INVALID_ARGS","","an argument is invalid, ex. null pointer",0,null],[13,"BAD_HANDLE","","A specified handle value does not refer to a handle.",0,null],[13,"WRONG_TYPE","","The subject of the operation is the wrong type to perform…",0,null],[13,"BAD_SYSCALL","","The specified syscall number is invalid.",0,null],[13,"OUT_OF_RANGE","","An argument is outside the valid range for this operation.",0,null],[13,"BUFFER_TOO_SMALL","","A caller provided buffer is too small for this operation.",0,null],[13,"BAD_STATE","","operation failed because the current state of the object…",0,null],[13,"TIMED_OUT","","The time limit for the operation elapsed before the…",0,null],[13,"SHOULD_WAIT","","The operation cannot be performed currently but…",0,null],[13,"CANCELED","","The in-progress operation (e.g. a wait) has been canceled.",0,null],[13,"PEER_CLOSED","","The operation failed because the remote end of the subject…",0,null],[13,"NOT_FOUND","","The requested entity is not found.",0,null],[13,"ALREADY_EXISTS","","An object with the specified identifier already exists.…",0,null],[13,"ALREADY_BOUND","","The operation failed because the named entity is already…",0,null],[13,"UNAVAILABLE","","The subject of the operation is currently unable to…",0,null],[13,"ACCESS_DENIED","","The caller did not have permission to perform the…",0,null],[13,"IO","","Otherwise unspecified error occurred during I/O.",0,null],[13,"IO_REFUSED","","The entity the I/O operation is being performed on…",0,null],[13,"IO_DATA_INTEGRITY","","The data in the operation failed an integrity check and is…",0,null],[13,"IO_DATA_LOSS","","The data in the operation is currently unavailable and may…",0,null],[13,"IO_NOT_PRESENT","","The device is no longer available (has been unplugged from…",0,null],[13,"IO_OVERRUN","","More data was received from the device than expected.…",0,null],[13,"IO_MISSED_DEADLINE","","An operation did not complete within the required…",0,null],[13,"IO_INVALID","","The data in the operation is invalid parameter or is out…",0,null],[13,"BAD_PATH","","Path name is too long.",0,null],[13,"NOT_DIR","","Object is not a directory or does not support directory…",0,null],[13,"NOT_FILE","","Object is not a regular file.",0,null],[13,"FILE_BIG","","This operation would cause a file to exceed a…",0,null],[13,"NO_SPACE","","Filesystem or device space is exhausted.",0,null],[13,"NOT_EMPTY","","Directory is not empty.",0,null],[13,"STOP","","Do not call again. Example: A notification callback will…",0,null],[13,"NEXT","","Advance to the next item. Example: A notification callback…",0,null],[13,"ASYNC","","Ownership of the item has moved to an asynchronous worker.",0,null],[13,"PROTOCOL_NOT_SUPPORTED","","Specified protocol is not supported.",0,null],[13,"ADDRESS_UNREACHABLE","","Host is unreachable.",0,null],[13,"ADDRESS_IN_USE","","Address is being used by someone else.",0,null],[13,"NOT_CONNECTED","","Socket is not connected.",0,null],[13,"CONNECTION_REFUSED","","Remote peer rejected the connection.",0,null],[13,"CONNECTION_RESET","","Connection was reset.",0,null],[13,"CONNECTION_ABORTED","","Connection was aborted.",0,null],[0,"io","","Objects for IO.",null,null],[3,"EventPair","zircon_object::io","Mutually signalable pair of events for concurrent…",null,null],[3,"Port","","Signaling and mailbox primitive",null,null],[3,"PortPacket","","",null,null],[12,"key","","",1,null],[12,"status","","",1,null],[12,"data","","",1,null],[3,"Timer","","An object that may be signaled at some point in the future",null,null],[4,"PortPacketPayload","","",null,null],[13,"Signal","","",2,null],[13,"User","","",2,null],[11,"create","","Create a pair of event.",3,[[]]],[11,"peer","","Get the peer event.",3,[[["self"]],[["arc"],["zxresult",["arc"]]]]],[11,"new","","Create a new `Port`.",4,[[],["arc"]]],[11,"push","","Push a `packet` into the port.",4,[[["self"],["portpacket"]]]],[11,"wait_async","","Asynchronous wait until at least one packet is available,…",4,[[["arc"]]]],[11,"new","","Create a new `Timer`.",5,[[],["arc"]]],[11,"set","","Starts a one-shot timer that will fire when `deadline`…",5,[[["arc"],["duration"]]]],[11,"cancel","","Cancel the pending timer started by `set`.",5,[[["self"]]]],[6,"Event","","Signalable event for concurrent programming",null,null],[0,"ipc","zircon_object","Objects for IPC.",null,null],[3,"Channel_","zircon_object::ipc","Bidirectional interprocess communication",null,null],[3,"MessagePacket","","",null,null],[12,"data","","",6,null],[12,"handles","","",6,null],[11,"create","","Create a channel and return a pair of its endpoints",7,[[]]],[11,"read","","Read a packet from the channel",7,[[["self"]],["zxresult"]]],[11,"write","","Write a packet to the channel",7,[[["self"],["t"]],["zxresult"]]],[6,"Channel","","",null,null],[0,"object","zircon_object","Kernel object basis.",null,null],[3,"Handle","zircon_object::object","A Handle is how a specific process refers to a specific…",null,null],[12,"object","","",8,null],[12,"rights","","",8,null],[3,"Rights","","Rights are associated with handles and convey privileges…",null,null],[3,"Signal","","Signals that waitable kernel objects expose to applications.",null,null],[3,"KObjectBase","","The base struct of a kernel object.",null,null],[12,"id","","",9,null],[3,"DummyObject","","Empty kernel object. Just for test.",null,null],[5,"wait_signal_many_async","","Asynchronous wait signal for multiple objects.",null,[[]]],[11,"new","","",8,[[["rights"],["kernelobject"],["arc",["kernelobject"]]],["self"]]],[18,"DUPLICATE","","Allows handle duplication via `zx_handle_duplicate()`.",10,null],[18,"TRANSFER","","Allows handle transfer via `zx_channel_write()`.",10,null],[18,"READ","","Allows reading of data from containers (channels, sockets,…",10,null],[18,"WRITE","","Allows writing of data to containers (channels, sockets,…",10,null],[18,"EXECUTE","","Allows mapping as executable if `Rights::MAP` is also…",10,null],[18,"MAP","","Allows mapping of a VM object into an address space.",10,null],[18,"GET_PROPERTY","","Allows property inspection via `zx_object_get_property()`.",10,null],[18,"SET_PROPERTY","","Allows property modification via `zx_object_set_property()`.",10,null],[18,"ENUMERATE","","Allows enumerating child objects via…",10,null],[18,"DESTROY","","Allows termination of task objects via `zx_task_kill()`.",10,null],[18,"SET_POLICY","","Allows policy modification via `zx_job_set_policy()`.",10,null],[18,"GET_POLICY","","Allows policy inspection via `zx_job_get_policy()`.",10,null],[18,"SIGNAL","","Allows use of `zx_object_signal()`.",10,null],[18,"SIGNAL_PEER","","Allows use of `zx_object_signal_peer()`.",10,null],[18,"WAIT","","Allows use of `zx_object_wait_one()`,…",10,null],[18,"INSPECT","","Allows inspection via `zx_object_get_info()`.",10,null],[18,"MANAGE_JOB","","Allows creation of processes, subjobs, etc.",10,null],[18,"MANAGE_PROCESS","","Allows creation of threads, etc.",10,null],[18,"MANAGE_THREAD","","Allows suspending/resuming threads, etc.",10,null],[18,"APPLY_PROFILE","","",10,null],[18,"SAME_RIGHTS","","",10,null],[18,"BASIC","","",10,null],[18,"IO","","",10,null],[18,"PROPERTY","","",10,null],[18,"POLICY","","",10,null],[18,"DEFAULT_CHANNEL","","",10,null],[18,"DEFAULT_PROCESS","","",10,null],[18,"DEFAULT_VMO","","",10,null],[18,"DEFAULT_VMAR","","",10,null],[18,"DEFAULT_JOB","","",10,null],[18,"DEFAULT_RESOURCE","","",10,null],[11,"empty","","Returns an empty set of flags",10,[[],["rights"]]],[11,"all","","Returns the set containing all flags.",10,[[],["rights"]]],[11,"bits","","Returns the raw value of the flags currently stored.",10,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",10,[[["u32"]],[["rights"],["option",["rights"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",10,[[["u32"]],["rights"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",10,[[["u32"]],["rights"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",10,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",10,[[["rights"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",10,[[["rights"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",10,[[["rights"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",10,[[["rights"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",10,[[["rights"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",10,[[["rights"],["self"],["bool"]]]],[18,"READABLE","","",11,null],[18,"WRITABLE","","",11,null],[18,"PEER_CLOSED","","",11,null],[18,"SIGNALED","","",11,null],[18,"HANDLE_CLOSED","","",11,null],[18,"USER_ALL","","",11,null],[18,"CLOCK_STARTED","","",11,null],[18,"SOCKET_PEER_WRITE_DISABLED","","",11,null],[18,"SOCKET_WRITE_DISABLED","","",11,null],[18,"SOCKET_READ_THRESHOLD","","",11,null],[18,"SOCKET_WRITE_THRESHOLD","","",11,null],[18,"TASK_TERMINATED","","",11,null],[18,"JOB_TERMINATED","","",11,null],[18,"JOB_NO_JOBS","","",11,null],[18,"JOB_NO_PROCESSES","","",11,null],[18,"PROCESS_TERMINATED","","",11,null],[18,"THREAD_TERMINATED","","",11,null],[18,"THREAD_RUNNING","","",11,null],[18,"THREAD_SUSPENDED","","",11,null],[11,"empty","","Returns an empty set of flags",11,[[],["signal"]]],[11,"all","","Returns the set containing all flags.",11,[[],["signal"]]],[11,"bits","","Returns the raw value of the flags currently stored.",11,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",11,[[["u32"]],[["signal"],["option",["signal"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",11,[[["u32"]],["signal"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",11,[[["u32"]],["signal"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",11,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",11,[[["signal"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",11,[[["signal"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",11,[[["signal"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",11,[[["signal"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",11,[[["signal"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",11,[[["signal"],["self"],["bool"]]]],[6,"HandleValue","","The value refers to a Handle in user space.",null,null],[6,"KoID","","The type of kernel object ID.",null,null],[6,"SignalHandler","","The type of kernel object signal handler.",null,null],[17,"INVALID_HANDLE","","Invalid handle value.",null,null],[8,"KernelObject","","Common interface of a kernel object.",null,null],[10,"id","","",12,[[["self"]],["koid"]]],[10,"type_name","","",12,[[["self"]],["str"]]],[10,"signal","","",12,[[["self"]],["signal"]]],[10,"signal_set","","",12,[[["signal"],["self"]]]],[10,"add_signal_callback","","",12,[[["signalhandler"],["self"]]]],[10,"wait_signal","","",12,[[["signal"],["self"]],["signal"]]],[11,"is","","Returns true if the trait object wraps an object of type…",12,[[["self"]],["bool"]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the…",12,[[["box"]],[["result",["box","box"]],["box"],["box"]]]],[11,"downcast_rc","","Returns an `Rc`-ed object from an `Rc`-ed trait object if…",12,[[["rc"]],[["rc"],["result",["rc","rc"]],["rc"]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object…",12,[[["self"]],[["__t"],["option"]]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait…",12,[[["self"]],[["__t"],["option"]]]],[11,"downcast_arc","","Returns an `Arc`-ed object from an `Arc`-ed trait object…",12,[[["arc"]],[["arc"],["result",["arc","arc"]],["arc"]]]],[11,"new","","Create a new kernel object base.",9,[[],["self"]]],[11,"with_signal","","Create a kernel object base with initial `signal`.",9,[[["signal"]],["self"]]],[11,"signal","","Get the signal status.",9,[[["self"]],["signal"]]],[11,"signal_change","","Change signal status: first `clear` then `set` indicated…",9,[[["signal"],["self"]]]],[11,"signal_set","","Assert `signal`.",9,[[["signal"],["self"]]]],[11,"signal_clear","","Deassert `signal`.",9,[[["signal"],["self"]]]],[11,"add_signal_callback","","Add `callback` for signal status changes.",9,[[["signalhandler"],["self"]]]],[11,"wait_signal","","Block until at least one `signal` assert. Return the…",9,[[["signal"],["self"]],["signal"]]],[11,"wait_signal_async","","Asynchronous wait for one of `signal`.",12,[[["arc"],["signal"]]]],[11,"send_signal_to_port_async","","Once one of the `signal` asserted, push a packet with…",12,[[["arc"],["signal"],["arc"],["u64"]]]],[11,"new","","",13,[[],["arc"]]],[0,"resource","zircon_object","",null,null],[3,"Resource","zircon_object::resource","Address space rights and accounting.",null,null],[4,"ResourceKind","","ResourceKind definition from…",null,null],[13,"MMIO","","",14,null],[13,"IRQ","","",14,null],[13,"IOPORT","","",14,null],[13,"HYPERVISOR","","",14,null],[13,"ROOT","","",14,null],[13,"VMEX","","",14,null],[13,"SMC","","",14,null],[13,"COUNT","","",14,null],[11,"create","","Create a new `Resource`.",15,[[["str"],["resourcekind"]],["arc"]]],[11,"validate","","",15,[[["self"],["resourcekind"]],["zxresult"]]],[0,"task","zircon_object","Objects for Task Management.",null,null],[3,"Job","zircon_object::task","Control a group of processes",null,null],[3,"JobPolicy","","",null,null],[3,"BasicPolicy","","",null,null],[12,"condition","","",16,null],[12,"action","","",16,null],[3,"TimerSlackPolicy","","",null,null],[3,"Process","","Process abstraction",null,null],[3,"Thread","","Runnable / computation entity",null,null],[12,"proc","","",17,null],[4,"SetPolicyOptions","","",null,null],[13,"Absolute","","Policy is applied for all conditions in policy or the call…",18,null],[13,"Relative","","Policy is applied for the conditions not specifically…",18,null],[4,"PolicyCondition","","",null,null],[13,"BadHandle","","A process under this job is attempting to issue a syscall…",19,null],[13,"WrongObject","","A process under this job is attempting to issue a syscall…",19,null],[13,"VmarWx","","A process under this job is attempting to map an address…",19,null],[13,"NewAny","","A special condition that stands for all of the above…",19,null],[13,"NewVMO","","A process under this job is attempting to create a new vm…",19,null],[13,"NewChannel","","A process under this job is attempting to create a new…",19,null],[13,"NewEvent","","A process under this job is attempting to create a new…",19,null],[13,"NewEventPair","","A process under this job is attempting to create a new…",19,null],[13,"NewPort","","A process under this job is attempting to create a new port.",19,null],[13,"NewSocket","","A process under this job is attempting to create a new…",19,null],[13,"NewFIFO","","A process under this job is attempting to create a new fifo.",19,null],[13,"NewTimer","","A process under this job is attempting to create a new…",19,null],[13,"NewProcess","","A process under this job is attempting to create a new…",19,null],[13,"NewProfile","","A process under this job is attempting to create a new…",19,null],[13,"AmbientMarkVMOExec","","A process under this job is attempting to use…",19,null],[4,"PolicyAction","","",null,null],[13,"Allow","","Allow condition.",20,null],[13,"Deny","","Prevent condition.",20,null],[13,"AllowException","","Generate an exception via the debug port. An exception…",20,null],[13,"DenyException","","Just like `AllowException`, but after resuming condition…",20,null],[13,"Kill","","Terminate the process.",20,null],[4,"TimerSlackDefaultMode","","",null,null],[13,"Center","","",21,null],[13,"Early","","",21,null],[13,"Late","","",21,null],[11,"root","","Create the root job.",22,[[],["arc"]]],[11,"create_child","","Create a new child job object.",22,[[["arc"],["u32"]],[["arc"],["zxresult",["arc"]]]]],[11,"policy","","Get the policy of the job.",22,[[["self"]],["jobpolicy"]]],[11,"set_policy_basic","","Sets one or more security and/or resource policies to an…",22,[[["self"],["setpolicyoptions"]],["zxresult"]]],[11,"set_policy_timer_slack","","",22,[[["self"],["setpolicyoptions"]]]],[11,"get_action","","Get the action of a policy `condition`.",23,[[["policycondition"],["self"]],[["option",["policyaction"]],["policyaction"]]]],[11,"apply","","Apply a basic policy.",23,[[["self"],["basicpolicy"]]]],[11,"merge","","Merge the policy with `parent`'s.",23,[[["self"]],["self"]]],[11,"create","","Create a new process in the `job`.",24,[[["str"],["u32"],["arc"]],[["arc"],["zxresult",["arc"]]]]],[11,"create_with_ext","","Create a new process with extension info.",24,[[["str"],["arc"]],[["arc"],["zxresult",["arc"]]]]],[11,"start","","Start the first `thread` in the process.",24,[[["usize"],["handle"],["arc"],["self"]],["zxresult"]]],[11,"exit","","",24,[[["i64"],["self"]]]],[11,"check_policy","","Check whether `condition` is allowed in the parent job's…",24,[[["policycondition"],["self"]],["zxresult"]]],[11,"ext","","Get the extension.",24,[[["self"]],["box"]]],[11,"vmar","","Get the `VmAddressRegion` of the process.",24,[[["self"]],[["vmaddressregion"],["arc",["vmaddressregion"]]]]],[11,"add_handle","","Add a handle to the process",24,[[["self"],["handle"]],["handlevalue"]]],[11,"remove_handle","","Remove a handle from the process",24,[[["handlevalue"],["self"]],["zxresult"]]],[11,"dup_handle","","Duplicate a handle with new `rights`, return the new…",24,[[["handlevalue"],["rights"],["self"]],[["handlevalue"],["zxresult",["handlevalue"]]]]],[11,"get_object_with_rights","","Get the kernel object corresponding to this…",24,[[["handlevalue"],["rights"],["self"]],[["zxresult",["arc"]],["arc"]]]],[11,"get_object","","Get the kernel object corresponding to this `handle_value`",24,[[["handlevalue"],["self"]],[["zxresult",["arc"]],["arc"]]]],[11,"validate_resource","","Try to get Resource and validate it",24,[[["handlevalue"],["self"],["resourcekind"]],["zxresult"]]],[11,"get_vmo_with_rights","","Equal to `get_object_with_rights<dyn VMObject>`.",24,[[["handlevalue"],["rights"],["self"]],[["zxresult",["arc"]],["arc",["vmobject"]]]]],[11,"create","","Create a new thread.",17,[[["str"],["u32"],["arc"]],[["arc"],["zxresult",["arc"]]]]],[11,"current","","Get current `Thread` object.",17,[[],["arc"]]],[11,"start","","Start execution on the thread.",17,[[["arc"],["usize"]],["zxresult"]]],[11,"start_with_regs","","Start execution with given registers.",17,[[["arc"],["generalregs"]],["zxresult"]]],[11,"exit","","Terminate the current running thread.",17,[[]]],[11,"read_state","","Read one aspect of thread state.",17,[[["threadstatekind"],["self"]],[["zxresult",["usize"]],["usize"]]]],[11,"write_state","","Write one aspect of thread state.",17,[[["threadstatekind"],["self"]],["zxresult"]]],[8,"Task","","Task (Thread, Process, or Job)",null,null],[10,"kill","","Kill the task.",25,[[["self"]],["zxresult"]]],[10,"suspend","","Suspend the task. Currently only thread or process handles…",25,[[["self"]],["zxresult"]]],[10,"create_exception_channel","","Create an exception channel on the task.",25,[[["self"],["u32"]],[["channel"],["zxresult",["channel"]]]]],[10,"resume_from_exception","","Resume the task from a previously caught exception.",25,[[["self"],["u32"],["port"]],["zxresult"]]],[0,"vm","zircon_object","Objects for Virtual Memory Management.",null,null],[3,"MMUFlags","zircon_object::vm","",null,null],[3,"VmAddressRegion","","Virtual Memory Address Regions",null,null],[3,"VmMapping","","Virtual Memory Mapping",null,null],[3,"VMObjectPaged","","The main VM object type, holding a list of pages.",null,null],[3,"VMObjectPhysical","","VMO representing a physical range of memory.",null,null],[5,"pages","","How many pages the `size` needs.",null,[[["usize"]],["usize"]]],[11,"new_root","","Create a new root VMAR.",26,[[],["arc"]]],[11,"create_child_at","","Create a child VMAR at given `offset`.",26,[[["arc"],["usize"]],[["arc"],["zxresult",["arc"]]]]],[11,"create_child","","Create a child VMAR at `offset` with `len`.",26,[[["arc"],["usize"],["option",["usize"]]],[["arc"],["zxresult",["arc"]]]]],[11,"map_at","","Map the `vmo` into this VMAR at given `offset`.",26,[[["vmobject"],["usize"],["mmuflags"],["self"],["arc",["vmobject"]]],["zxresult"]]],[11,"map","","Map the `vmo` into this VMAR.",26,[[["vmobject"],["usize"],["mmuflags"],["option",["usize"]],["self"],["arc",["vmobject"]]],[["virtaddr"],["zxresult",["virtaddr"]]]]],[11,"unmap","","Unmaps all VMO mappings and destroys all sub-regions…",26,[[["virtaddr"],["self"],["usize"]],["zxresult"]]],[11,"protect","","",26,[[["self"]]]],[11,"destroy","","Unmap all mappings within the VMAR, and destroy all…",26,[[["arc"]],["zxresult"]]],[11,"clear","","Unmap all mappings and destroy all sub-regions of VMAR.",26,[[["self"]],["zxresult"]]],[11,"table_phys","","Get physical address of the underlying page table.",26,[[["self"]],["physaddr"]]],[11,"addr","","Get start address of this VMAR.",26,[[["self"]],["usize"]]],[11,"is_dead","","",26,[[["self"]],["bool"]]],[11,"is_alive","","",26,[[["self"]],["bool"]]],[11,"new","","Create a new VMO backing on physical memory allocated in…",27,[[["usize"]],["arc"]]],[11,"new","","Create a new VMO representing a piece of contiguous…",28,[[["physaddr"],["usize"]],["arc"]]],[6,"PhysAddr","","Physical Address",null,null],[6,"VirtAddr","","Virtual Address",null,null],[17,"PAGE_SIZE","","Size of a page",null,null],[8,"VMObject","","Virtual Memory Objects",null,null],[10,"read","","Read memory to `buf` from VMO at `offset`.",29,[[["self"],["usize"]]]],[10,"write","","Write memory from `buf` to VMO at `offset`.",29,[[["self"],["usize"]]]],[10,"len","","Get the length of VMO.",29,[[["self"]],["usize"]]],[10,"set_len","","Set the length of VMO.",29,[[["self"],["usize"]]]],[10,"map_to","","Map physical memory to `page_table`.",29,[[["pagetable"],["virtaddr"],["usize"],["mmuflags"],["self"]]]],[11,"unmap_from","","Unmap physical memory from `page_table`.",29,[[["pagetable"],["virtaddr"],["usize"],["self"]]]],[10,"commit","","Commit allocating physical memory.",29,[[["self"],["usize"]]]],[6,"ZxResult","zircon_object","The type returned by kernel objects methods.",null,null],[14,"impl_kobject","","Macro to auto implement `KernelObject` trait.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"into_any","","",0,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",0,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]],[11,"into_any_arc","","",0,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::io","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"into_any","","",3,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",3,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",3,[[["self"]],["any"]]],[11,"as_any_mut","","",3,[[["self"]],["any"]]],[11,"into_any_arc","","",3,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"into_any","","",4,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",4,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",4,[[["self"]],["any"]]],[11,"as_any_mut","","",4,[[["self"]],["any"]]],[11,"into_any_arc","","",4,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"into_any","","",1,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",1,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",1,[[["self"]],["any"]]],[11,"as_any_mut","","",1,[[["self"]],["any"]]],[11,"into_any_arc","","",1,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"into_any","","",5,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",5,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",5,[[["self"]],["any"]]],[11,"as_any_mut","","",5,[[["self"]],["any"]]],[11,"into_any_arc","","",5,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_any","","",2,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",2,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",2,[[["self"]],["any"]]],[11,"as_any_mut","","",2,[[["self"]],["any"]]],[11,"into_any_arc","","",2,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::ipc","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"into_any","","",7,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",7,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",7,[[["self"]],["any"]]],[11,"as_any_mut","","",7,[[["self"]],["any"]]],[11,"into_any_arc","","",7,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"into_any","","",6,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",6,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",6,[[["self"]],["any"]]],[11,"as_any_mut","","",6,[[["self"]],["any"]]],[11,"into_any_arc","","",6,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::object","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"into_any","","",8,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",8,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",8,[[["self"]],["any"]]],[11,"as_any_mut","","",8,[[["self"]],["any"]]],[11,"into_any_arc","","",8,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"into_any","","",10,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",10,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",10,[[["self"]],["any"]]],[11,"as_any_mut","","",10,[[["self"]],["any"]]],[11,"into_any_arc","","",10,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"into_any","","",11,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",11,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",11,[[["self"]],["any"]]],[11,"as_any_mut","","",11,[[["self"]],["any"]]],[11,"into_any_arc","","",11,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"into_any","","",9,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",9,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",9,[[["self"]],["any"]]],[11,"as_any_mut","","",9,[[["self"]],["any"]]],[11,"into_any_arc","","",9,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"into_any","","",13,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",13,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",13,[[["self"]],["any"]]],[11,"as_any_mut","","",13,[[["self"]],["any"]]],[11,"into_any_arc","","",13,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::resource","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"into_any","","",15,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",15,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",15,[[["self"]],["any"]]],[11,"as_any_mut","","",15,[[["self"]],["any"]]],[11,"into_any_arc","","",15,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"into_any","","",14,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",14,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",14,[[["self"]],["any"]]],[11,"as_any_mut","","",14,[[["self"]],["any"]]],[11,"into_any_arc","","",14,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::task","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"into_any","","",22,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",22,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",22,[[["self"]],["any"]]],[11,"as_any_mut","","",22,[[["self"]],["any"]]],[11,"into_any_arc","","",22,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"into_any","","",23,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",23,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",23,[[["self"]],["any"]]],[11,"as_any_mut","","",23,[[["self"]],["any"]]],[11,"into_any_arc","","",23,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"into_any","","",16,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",16,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",16,[[["self"]],["any"]]],[11,"as_any_mut","","",16,[[["self"]],["any"]]],[11,"into_any_arc","","",16,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"into_any","","",30,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",30,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",30,[[["self"]],["any"]]],[11,"as_any_mut","","",30,[[["self"]],["any"]]],[11,"into_any_arc","","",30,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"into_any","","",24,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",24,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",24,[[["self"]],["any"]]],[11,"as_any_mut","","",24,[[["self"]],["any"]]],[11,"into_any_arc","","",24,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"into_any","","",17,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",17,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",17,[[["self"]],["any"]]],[11,"as_any_mut","","",17,[[["self"]],["any"]]],[11,"into_any_arc","","",17,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"into_any","","",18,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",18,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",18,[[["self"]],["any"]]],[11,"as_any_mut","","",18,[[["self"]],["any"]]],[11,"into_any_arc","","",18,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"into_any","","",19,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",19,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",19,[[["self"]],["any"]]],[11,"as_any_mut","","",19,[[["self"]],["any"]]],[11,"into_any_arc","","",19,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"into_any","","",20,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",20,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",20,[[["self"]],["any"]]],[11,"as_any_mut","","",20,[[["self"]],["any"]]],[11,"into_any_arc","","",20,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"into_any","","",21,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",21,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",21,[[["self"]],["any"]]],[11,"as_any_mut","","",21,[[["self"]],["any"]]],[11,"into_any_arc","","",21,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","zircon_object::vm","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"into_any","","",31,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",31,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",31,[[["self"]],["any"]]],[11,"as_any_mut","","",31,[[["self"]],["any"]]],[11,"into_any_arc","","",31,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"into_any","","",26,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",26,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",26,[[["self"]],["any"]]],[11,"as_any_mut","","",26,[[["self"]],["any"]]],[11,"into_any_arc","","",26,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"into_any","","",32,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",32,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",32,[[["self"]],["any"]]],[11,"as_any_mut","","",32,[[["self"]],["any"]]],[11,"into_any_arc","","",32,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"into_any","","",27,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",27,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",27,[[["self"]],["any"]]],[11,"as_any_mut","","",27,[[["self"]],["any"]]],[11,"into_any_arc","","",27,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"into_any","","",28,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",28,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",28,[[["self"]],["any"]]],[11,"as_any_mut","","",28,[[["self"]],["any"]]],[11,"into_any_arc","","",28,[[["arc"]],[["any"],["arc",["any"]]]]],[11,"extend","","",31,[[["self"],["t"]]]],[11,"cmp","","",31,[[["self"],["mmuflags"]],["ordering"]]],[11,"partial_cmp","","",31,[[["self"],["mmuflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",31,[[["self"],["mmuflags"]],["bool"]]],[11,"le","","",31,[[["self"],["mmuflags"]],["bool"]]],[11,"gt","","",31,[[["self"],["mmuflags"]],["bool"]]],[11,"ge","","",31,[[["self"],["mmuflags"]],["bool"]]],[11,"fmt","","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",31,[[["mmuflags"]],["mmuflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",31,[[["mmuflags"]],["mmuflags"]]],[11,"eq","","",31,[[["self"],["mmuflags"]],["bool"]]],[11,"ne","","",31,[[["self"],["mmuflags"]],["bool"]]],[11,"not","","Returns the complement of this set of flags.",31,[[],["mmuflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",31,[[["mmuflags"]],["mmuflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",31,[[["mmuflags"],["self"]]]],[11,"from_iter","","",31,[[["t"]],["mmuflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",31,[[["mmuflags"]],["mmuflags"]]],[11,"fmt","","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"sub_assign","","Disables all flags enabled in the set.",31,[[["mmuflags"],["self"]]]],[11,"fmt","","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"bitor_assign","","Adds the set of flags.",31,[[["mmuflags"],["self"]]]],[11,"clone","","",31,[[["self"]],["mmuflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",31,[[["mmuflags"],["self"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"fmt","","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"id","zircon_object::io","",3,[[["self"]],["koid"]]],[11,"type_name","","",3,[[["self"]],["str"]]],[11,"signal","","",3,[[["self"]],["signal"]]],[11,"signal_set","","",3,[[["signal"],["self"]]]],[11,"add_signal_callback","","",3,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",3,[[["signal"],["self"]],["signal"]]],[11,"id","","",4,[[["self"]],["koid"]]],[11,"type_name","","",4,[[["self"]],["str"]]],[11,"signal","","",4,[[["self"]],["signal"]]],[11,"signal_set","","",4,[[["signal"],["self"]]]],[11,"add_signal_callback","","",4,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",4,[[["signal"],["self"]],["signal"]]],[11,"id","","",5,[[["self"]],["koid"]]],[11,"type_name","","",5,[[["self"]],["str"]]],[11,"signal","","",5,[[["self"]],["signal"]]],[11,"signal_set","","",5,[[["signal"],["self"]]]],[11,"add_signal_callback","","",5,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",5,[[["signal"],["self"]],["signal"]]],[11,"id","zircon_object","",33,[[["self"]],["koid"]]],[11,"type_name","","",33,[[["self"]],["str"]]],[11,"signal","","",33,[[["self"]],["signal"]]],[11,"signal_set","","",33,[[["signal"],["self"]]]],[11,"add_signal_callback","","",33,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",33,[[["signal"],["self"]],["signal"]]],[11,"id","zircon_object::object","",13,[[["self"]],["koid"]]],[11,"type_name","","",13,[[["self"]],["str"]]],[11,"signal","","",13,[[["self"]],["signal"]]],[11,"signal_set","","",13,[[["signal"],["self"]]]],[11,"add_signal_callback","","",13,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",13,[[["signal"],["self"]],["signal"]]],[11,"id","zircon_object::resource","",15,[[["self"]],["koid"]]],[11,"type_name","","",15,[[["self"]],["str"]]],[11,"signal","","",15,[[["self"]],["signal"]]],[11,"signal_set","","",15,[[["signal"],["self"]]]],[11,"add_signal_callback","","",15,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",15,[[["signal"],["self"]],["signal"]]],[11,"id","zircon_object::task","",22,[[["self"]],["koid"]]],[11,"type_name","","",22,[[["self"]],["str"]]],[11,"signal","","",22,[[["self"]],["signal"]]],[11,"signal_set","","",22,[[["signal"],["self"]]]],[11,"add_signal_callback","","",22,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",22,[[["signal"],["self"]],["signal"]]],[11,"id","","",24,[[["self"]],["koid"]]],[11,"type_name","","",24,[[["self"]],["str"]]],[11,"signal","","",24,[[["self"]],["signal"]]],[11,"signal_set","","",24,[[["signal"],["self"]]]],[11,"add_signal_callback","","",24,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",24,[[["signal"],["self"]],["signal"]]],[11,"id","","",17,[[["self"]],["koid"]]],[11,"type_name","","",17,[[["self"]],["str"]]],[11,"signal","","",17,[[["self"]],["signal"]]],[11,"signal_set","","",17,[[["signal"],["self"]]]],[11,"add_signal_callback","","",17,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",17,[[["signal"],["self"]],["signal"]]],[11,"id","zircon_object::vm","",26,[[["self"]],["koid"]]],[11,"type_name","","",26,[[["self"]],["str"]]],[11,"signal","","",26,[[["self"]],["signal"]]],[11,"signal_set","","",26,[[["signal"],["self"]]]],[11,"add_signal_callback","","",26,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",26,[[["signal"],["self"]],["signal"]]],[11,"id","","",27,[[["self"]],["koid"]]],[11,"type_name","","",27,[[["self"]],["str"]]],[11,"signal","","",27,[[["self"]],["signal"]]],[11,"signal_set","","",27,[[["signal"],["self"]]]],[11,"add_signal_callback","","",27,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",27,[[["signal"],["self"]],["signal"]]],[11,"id","","",28,[[["self"]],["koid"]]],[11,"type_name","","",28,[[["self"]],["str"]]],[11,"signal","","",28,[[["self"]],["signal"]]],[11,"signal_set","","",28,[[["signal"],["self"]]]],[11,"add_signal_callback","","",28,[[["signalhandler"],["self"]]]],[11,"wait_signal","","",28,[[["signal"],["self"]],["signal"]]],[11,"read","","",27,[[["self"],["usize"]]]],[11,"write","","",27,[[["self"],["usize"]]]],[11,"len","","",27,[[["self"]],["usize"]]],[11,"set_len","","",27,[[["self"],["usize"]]]],[11,"map_to","","",27,[[["pagetable"],["usize"],["mmuflags"],["self"]]]],[11,"commit","","",27,[[["self"],["usize"]]]],[11,"read","","",28,[[["self"],["usize"]]]],[11,"write","","",28,[[["self"],["usize"]]]],[11,"len","","",28,[[["self"]],["usize"]]],[11,"set_len","","",28,[[["self"],["usize"]]]],[11,"map_to","","",28,[[["pagetable"],["usize"],["mmuflags"],["self"]]]],[11,"commit","","",28,[[["self"],["usize"]]]],[11,"drop","zircon_object::io","",3,[[["self"]]]],[11,"drop","zircon_object::ipc","",7,[[["self"]]]],[11,"drop","zircon_object::vm","",32,[[["self"]]]],[11,"fmt","zircon_object","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","zircon_object::io","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",4,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object","",33,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::object","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::resource","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::task","",22,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",17,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::vm","",26,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",27,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",28,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"sub","zircon_object::object","Returns the set difference of the two sets of flags.",10,[[["rights"]],["rights"]]],[11,"sub","","Returns the set difference of the two sets of flags.",11,[[["signal"]],["signal"]]],[11,"eq","zircon_object","",0,[[["self"],["zxerror"]],["bool"]]],[11,"eq","zircon_object::io","",1,[[["self"],["portpacket"]],["bool"]]],[11,"ne","","",1,[[["self"],["portpacket"]],["bool"]]],[11,"eq","","",2,[[["self"],["portpacketpayload"]],["bool"]]],[11,"ne","","",2,[[["self"],["portpacketpayload"]],["bool"]]],[11,"eq","zircon_object::object","",10,[[["self"],["rights"]],["bool"]]],[11,"ne","","",10,[[["self"],["rights"]],["bool"]]],[11,"eq","","",11,[[["signal"],["self"]],["bool"]]],[11,"ne","","",11,[[["signal"],["self"]],["bool"]]],[11,"eq","zircon_object::resource","",14,[[["resourcekind"],["self"]],["bool"]]],[11,"eq","zircon_object::task","",20,[[["policyaction"],["self"]],["bool"]]],[11,"cmp","zircon_object::object","",10,[[["self"],["rights"]],["ordering"]]],[11,"cmp","","",11,[[["signal"],["self"]],["ordering"]]],[11,"partial_cmp","","",10,[[["self"],["rights"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",10,[[["self"],["rights"]],["bool"]]],[11,"le","","",10,[[["self"],["rights"]],["bool"]]],[11,"gt","","",10,[[["self"],["rights"]],["bool"]]],[11,"ge","","",10,[[["self"],["rights"]],["bool"]]],[11,"partial_cmp","","",11,[[["signal"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",11,[[["signal"],["self"]],["bool"]]],[11,"le","","",11,[[["signal"],["self"]],["bool"]]],[11,"gt","","",11,[[["signal"],["self"]],["bool"]]],[11,"ge","","",11,[[["signal"],["self"]],["bool"]]],[11,"sub_assign","","Disables all flags enabled in the set.",10,[[["rights"],["self"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",11,[[["signal"],["self"]]]],[11,"not","","Returns the complement of this set of flags.",10,[[],["rights"]]],[11,"not","","Returns the complement of this set of flags.",11,[[],["signal"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",10,[[["rights"]],["rights"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",11,[[["signal"]],["signal"]]],[11,"bitor","","Returns the union of the two sets of flags.",10,[[["rights"]],["rights"]]],[11,"bitor","","Returns the union of the two sets of flags.",11,[[["signal"]],["signal"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",10,[[["rights"]],["rights"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",11,[[["signal"]],["signal"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",10,[[["rights"],["self"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",11,[[["signal"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",10,[[["rights"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",11,[[["signal"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",10,[[["rights"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",11,[[["signal"],["self"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"extend","","",10,[[["self"],["intoiterator"]]]],[11,"extend","","",11,[[["self"],["intoiterator"]]]],[11,"from_iter","","",10,[[["intoiterator"]],["rights"]]],[11,"from_iter","","",11,[[["intoiterator"]],["signal"]]],[11,"try_from","","",10,[[["u32"]],["zxresult"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"clone","zircon_object","",0,[[["self"]],["zxerror"]]],[11,"clone","zircon_object::object","",8,[[["self"]],["handle"]]],[11,"clone","","",10,[[["self"]],["rights"]]],[11,"clone","","",11,[[["self"]],["signal"]]],[11,"clone","zircon_object::resource","",14,[[["self"]],["resourcekind"]]],[11,"clone","zircon_object::task","",23,[[["self"]],["jobpolicy"]]],[11,"clone","","",18,[[["self"]],["setpolicyoptions"]]],[11,"clone","","",16,[[["self"]],["basicpolicy"]]],[11,"clone","","",19,[[["self"]],["policycondition"]]],[11,"clone","","",20,[[["self"]],["policyaction"]]],[11,"clone","","",30,[[["self"]],["timerslackpolicy"]]],[11,"clone","","",21,[[["self"]],["timerslackdefaultmode"]]],[11,"default","zircon_object::ipc","",6,[[],["messagepacket"]]],[11,"default","zircon_object::object","",11,[[],["signal"]]],[11,"default","","",9,[[],["self"]]],[11,"default","zircon_object::task","",23,[[],["jobpolicy"]]],[18,"READ","zircon_object::vm","",31,null],[18,"WRITE","","",31,null],[18,"EXECUTE","","",31,null],[11,"empty","","Returns an empty set of flags",31,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",31,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",31,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",31,[[["usize"]],[["option",["mmuflags"]],["mmuflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",31,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",31,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",31,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",31,[[["mmuflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",31,[[["mmuflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",31,[[["mmuflags"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",31,[[["mmuflags"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",31,[[["mmuflags"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",31,[[["mmuflags"],["self"],["bool"]]]],[11,"unmap_from","","Unmap physical memory from `page_table`.",29,[[["pagetable"],["virtaddr"],["usize"],["self"]]]]],"p":[[4,"ZxError"],[3,"PortPacket"],[4,"PortPacketPayload"],[3,"EventPair"],[3,"Port"],[3,"Timer"],[3,"MessagePacket"],[3,"Channel_"],[3,"Handle"],[3,"KObjectBase"],[3,"Rights"],[3,"Signal"],[8,"KernelObject"],[3,"DummyObject"],[4,"ResourceKind"],[3,"Resource"],[3,"BasicPolicy"],[3,"Thread"],[4,"SetPolicyOptions"],[4,"PolicyCondition"],[4,"PolicyAction"],[4,"TimerSlackDefaultMode"],[3,"Job"],[3,"JobPolicy"],[3,"Process"],[8,"Task"],[3,"VmAddressRegion"],[3,"VMObjectPaged"],[3,"VMObjectPhysical"],[8,"VMObject"],[3,"TimerSlackPolicy"],[3,"MMUFlags"],[3,"VmMapping"],[6,"Channel"]]};
searchIndex["zircon_syscall"] = {"doc":"Zircon syscall implementations","i":[[3,"Syscall","zircon_syscall","",null,null],[12,"thread","","",0,null],[11,"sys_channel_read","","Read a message from a channel.",0,[[["u8"],["u32"],["userptr",["handlevalue","out"]],["userptr",["u32","out"]],["handlevalue"],["userptr",["u8","out"]],["self"],["out"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_debug_write","","",0,[[["in"],["usize"],["userptr",["u8","in"]],["self"],["u8"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_debuglog_create","","",0,[[["userptr",["handlevalue","out"]],["handlevalue"],["usize"],["self"],["out"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_debuglog_write","","",0,[[["handlevalue"],["u32"],["in"],["userptr",["u8","in"]],["usize"],["self"],["u8"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_handle_duplicate","","",0,[[["userptr",["handlevalue","out"]],["handlevalue"],["u32"],["self"],["out"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_handle_close","","",0,[[["handlevalue"],["self"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_handle_close_many","","",0,[[["userptr",["handlevalue","in"]],["handlevalue"],["in"],["usize"],["self"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_process_create","","",0,[[["out"],["in"],["u32"],["userptr",["handlevalue","out"]],["handlevalue"],["usize"],["userptr",["u8","in"]],["self"],["u8"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_process_exit","","",0,[[["i64"],["self"]]]],[11,"sys_vmar_allocate","","",0,[[["userptr",["handlevalue","out"]],["u32"],["userptr",["usize","out"]],["u64"],["handlevalue"],["usize"],["self"],["out"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_vmo_create","","",0,[[["out"],["u32"],["handlevalue"],["userptr",["handlevalue","out"]],["self"],["u64"]],[["usize"],["zxresult",["usize"]]]]],[11,"sys_vmo_read","","",0,[[["out"],["handlevalue"],["u64"],["userptr",["u8","out"]],["usize"],["self"],["u8"]],[["usize"],["zxresult",["usize"]]]]],[11,"syscall","","",0,[[["u32"],["self"]],["isize"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",0,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]]],"p":[[3,"Syscall"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);