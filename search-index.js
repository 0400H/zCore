var searchIndex={};
searchIndex["kernel_hal"] = {"doc":"Hardware Abstraction Layer","i":[[3,"Thread","kernel_hal","",null,null],[3,"PageTable","","Page Table",null,null],[3,"PhysFrame","","",null,null],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["physaddr"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["physaddr"]]]],[5,"serial_write","","Output a char to console.",null,[[["str"]]]],[5,"timer_now","","Get current time.",null,[[],["duration"]]],[5,"timer_set","","Set a new timer. After `deadline`, the `callback` will be…",null,[[["box",["fnonce"]],["duration"],["fnonce"]]]],[0,"defs","","",null,null],[3,"GeneralRegs","kernel_hal::defs","",null,null],[12,"rax","","",0,null],[12,"rbx","","",0,null],[12,"rcx","","",0,null],[12,"rdx","","",0,null],[12,"rsi","","",0,null],[12,"rdi","","",0,null],[12,"rbp","","",0,null],[12,"rsp","","",0,null],[12,"r8","","",0,null],[12,"r9","","",0,null],[12,"r10","","",0,null],[12,"r11","","",0,null],[12,"r12","","",0,null],[12,"r13","","",0,null],[12,"r14","","",0,null],[12,"r15","","",0,null],[12,"rip","","",0,null],[12,"rflags","","",0,null],[12,"fs_base","","",0,null],[12,"gs_base","","",0,null],[3,"MMUFlags","","",null,null],[6,"PhysAddr","","",null,null],[6,"VirtAddr","","",null,null],[17,"PAGE_SIZE","","",null,null],[11,"new_fn","","",0,[[["usize"]],["self"]]],[11,"clone","","",0,[[["self"],["usize"]],["self"]]],[11,"fork","","",0,[[["self"]],["self"]]],[18,"READ","","",1,null],[18,"WRITE","","",1,null],[18,"EXECUTE","","",1,null],[11,"empty","","Returns an empty set of flags",1,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",1,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",1,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",1,[[["usize"]],[["mmuflags"],["option",["mmuflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",1,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",1,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",1,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",1,[[["self"],["mmuflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",1,[[["self"],["mmuflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"remove","","Removes the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",1,[[["bool"],["self"],["mmuflags"]]]],[11,"spawn","kernel_hal","Spawn a new thread.",2,[[["arc"],["generalregs"]],["self"]]],[11,"new","","Create a new `PageTable`.",3,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",3,[[["mmuflags"],["virtaddr"],["self"],["physaddr"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",3,[[["virtaddr"],["self"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",3,[[["virtaddr"],["self"],["mmuflags"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",3,[[["virtaddr"],["self"]],[["result",["physaddr"]],["physaddr"]]]],[11,"table_phys","","Get the physical address of root page table.",3,[[["self"]],["physaddr"]]],[11,"map_many","","",3,[[["mmuflags"],["virtaddr"],["self"]],["result"]]],[11,"map_cont","","",3,[[["usize"],["mmuflags"],["virtaddr"],["self"],["physaddr"]],["result"]]],[11,"unmap_cont","","",3,[[["virtaddr"],["self"],["usize"]],["result"]]],[11,"alloc","","",4,[[],["option"]]],[11,"addr","","",4,[[["self"]],["physaddr"]]],[0,"user","","",null,null],[3,"UserPtr","kernel_hal::user","",null,null],[4,"In","","",null,null],[4,"Out","","",null,null],[4,"InOut","","",null,null],[4,"Error","","The error type which is returned from user pointer.",null,null],[13,"InvalidUtf8","","",5,null],[13,"InvalidPointer","","",5,null],[6,"UserInPtr","","",null,null],[6,"UserOutPtr","","",null,null],[6,"UserInOutPtr","","",null,null],[8,"Policy","","",null,null],[8,"Read","","",null,null],[8,"Write","","",null,null],[11,"is_null","","",6,[[["self"]],["bool"]]],[11,"add","","",6,[[["self"],["usize"]],["self"]]],[11,"as_ptr","","",6,[[["self"]]]],[11,"read","","",6,[[["self"]],[["result",["error"]],["error"]]]],[11,"read_if_not_null","","",6,[[["self"]],[["option"],["error"],["result",["option","error"]]]]],[11,"read_array","","",6,[[["self"],["usize"]],[["result",["vec","error"]],["vec"],["error"]]]],[11,"read_string","","",6,[[["self"],["usize"]],[["error"],["string"],["result",["string","error"]]]]],[11,"read_cstring","","",6,[[["self"]],[["error"],["string"],["result",["string","error"]]]]],[11,"read_cstring_array","","",6,[[["self"]],[["result",["vec","error"]],["vec",["string"]],["error"]]]],[11,"write","","",6,[[["self"],["t"]],[["error"],["result",["error"]]]]],[11,"write_if_not_null","","",6,[[["self"],["t"]],[["error"],["result",["error"]]]]],[11,"write_array","","",6,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_cstring","","",6,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"from","kernel_hal","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","kernel_hal::defs","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","kernel_hal::user","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"from","","",6,[[["usize"]],["self"]]],[11,"fmt","kernel_hal::defs","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","kernel_hal::user","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"sub","kernel_hal::defs","Returns the set difference of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"eq","","",0,[[["self"],["generalregs"]],["bool"]]],[11,"ne","","",0,[[["self"],["generalregs"]],["bool"]]],[11,"eq","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"ne","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"eq","kernel_hal::user","",5,[[["self"],["error"]],["bool"]]],[11,"cmp","kernel_hal::defs","",1,[[["self"],["mmuflags"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["mmuflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"le","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"gt","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"ge","","",1,[[["self"],["mmuflags"]],["bool"]]],[11,"sub_assign","","Disables all flags enabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"not","","Returns the complement of this set of flags.",1,[[],["mmuflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"bitor_assign","","Adds the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"drop","kernel_hal","",4,[[["self"]]]],[11,"hash","kernel_hal::defs","",1,[[["self"],["__h"]]]],[11,"extend","","",1,[[["self"],["intoiterator"]]]],[11,"from_iter","","",1,[[["intoiterator"]],["mmuflags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["generalregs"]]],[11,"clone","","",1,[[["self"]],["mmuflags"]]],[11,"clone","kernel_hal::user","",5,[[["self"]],["error"]]],[11,"default","kernel_hal::defs","",0,[[],["generalregs"]]]],"p":[[3,"GeneralRegs"],[3,"MMUFlags"],[3,"Thread"],[3,"PageTable"],[3,"PhysFrame"],[4,"Error"],[3,"UserPtr"],[4,"In"],[4,"Out"],[4,"InOut"]]};
searchIndex["kernel_hal_bare"] = {"doc":"Zircon HAL implementation for bare metal environment.","i":[[3,"Frame","kernel_hal_bare","",null,null],[5,"map_kernel","","Map kernel for the new page table.",null,[[]]],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["physaddr"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["physaddr"]]]],[5,"init","","Initialize the HAL.",null,[[]]],[0,"arch","","",null,null],[3,"PageTableImpl","kernel_hal_bare::arch","Page Table",null,null],[3,"MMUFlags","","",null,null],[5,"kernel_root_table","","",null,[[],["pagetable"]]],[5,"putfmt","","",null,[[["arguments"]]]],[5,"serial_write","","",null,[[["str"]]]],[5,"timer_init","","",null,[[]]],[5,"ack","","",null,[[["u8"]]]],[11,"new","","Create a new `PageTable`.",0,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",0,[[["physaddr"],["self"],["virtaddr"],["mmuflags"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",0,[[["self"],["virtaddr"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",0,[[["self"],["virtaddr"],["mmuflags"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",0,[[["self"],["virtaddr"]],[["physaddr"],["result",["physaddr"]]]]],[18,"READ","","",1,null],[18,"WRITE","","",1,null],[18,"EXECUTE","","",1,null],[11,"empty","","Returns an empty set of flags",1,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",1,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",1,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",1,[[["usize"]],[["mmuflags"],["option",["mmuflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",1,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",1,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",1,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",1,[[["mmuflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",1,[[["mmuflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"remove","","Removes the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",1,[[["self"],["mmuflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",1,[[["self"],["mmuflags"],["bool"]]]],[11,"alloc","kernel_hal_bare","",2,[[],["option"]]],[11,"dealloc","","",2,[[["self"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","kernel_hal_bare::arch","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"eq","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"ne","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"cmp","","",1,[[["mmuflags"],["self"]],["ordering"]]],[11,"partial_cmp","","",1,[[["mmuflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"le","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"gt","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"ge","","",1,[[["mmuflags"],["self"]],["bool"]]],[11,"sub_assign","","Disables all flags enabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"not","","Returns the complement of this set of flags.",1,[[],["mmuflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",1,[[["mmuflags"]],["mmuflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",1,[[["self"],["mmuflags"]]]],[11,"bitor_assign","","Adds the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",1,[[["self"],["mmuflags"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"extend","","",1,[[["self"],["intoiterator"]]]],[11,"from_iter","","",1,[[["intoiterator"]],["mmuflags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["mmuflags"]]]],"p":[[3,"PageTableImpl"],[3,"MMUFlags"],[3,"Frame"]]};
searchIndex["kernel_hal_unix"] = {"doc":"","i":[[3,"GeneralRegs","kernel_hal_unix","",null,null],[12,"rax","","",0,null],[12,"rbx","","",0,null],[12,"rcx","","",0,null],[12,"rdx","","",0,null],[12,"rsi","","",0,null],[12,"rdi","","",0,null],[12,"rbp","","",0,null],[12,"rsp","","",0,null],[12,"r8","","",0,null],[12,"r9","","",0,null],[12,"r10","","",0,null],[12,"r11","","",0,null],[12,"r12","","",0,null],[12,"r13","","",0,null],[12,"r14","","",0,null],[12,"r15","","",0,null],[12,"rip","","",0,null],[12,"rflags","","",0,null],[12,"fs_base","","",0,null],[12,"gs_base","","",0,null],[3,"MMUFlags","","",null,null],[6,"PhysAddr","","",null,null],[6,"VirtAddr","","",null,null],[17,"PAGE_SIZE","","",null,null],[3,"Thread","","",null,null],[3,"PageTable","","Page Table",null,null],[3,"PhysFrame","","",null,null],[5,"switch_to_kernel","","Switch TLS from user to kernel.",null,[[]]],[5,"pmem_read","","Read physical memory from `paddr` to `buf`.",null,[[["physaddr"]]]],[5,"pmem_write","","Write physical memory to `paddr` from `buf`.",null,[[["physaddr"]]]],[5,"serial_write","","Output a char to console.",null,[[["str"]]]],[5,"timer_now","","Get current time.",null,[[],["duration"]]],[5,"timer_set","","Set a new timer.",null,[[["box",["fnonce"]],["duration"],["fnonce"]]]],[5,"init","","Initialize the HAL.",null,[[]]],[5,"syscall_entry","","",null,null],[11,"spawn","","",1,[[["generalregs"],["arc",["usize"]],["usize"]],["self"]]],[11,"new","","Create a new `PageTable`.",2,[[],["self"]]],[11,"map","","Map the page of `vaddr` to the frame of `paddr` with…",2,[[["virtaddr"],["physaddr"],["mmuflags"],["self"]],["result"]]],[11,"unmap","","Unmap the page of `vaddr`.",2,[[["virtaddr"],["self"]],["result"]]],[11,"protect","","Change the `flags` of the page of `vaddr`.",2,[[["virtaddr"],["self"],["mmuflags"]],["result"]]],[11,"query","","Query the physical address which the page of `vaddr` maps…",2,[[["virtaddr"],["self"]],[["physaddr"],["result",["physaddr"]]]]],[11,"unmap_cont","","",2,[[["virtaddr"],["self"],["usize"]],["result"]]],[11,"alloc","","",3,[[],["option"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"cmp","","",4,[[["mmuflags"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["generalregs"]],["bool"]]],[11,"ne","","",0,[[["self"],["generalregs"]],["bool"]]],[11,"eq","","",4,[[["mmuflags"],["self"]],["bool"]]],[11,"ne","","",4,[[["mmuflags"],["self"]],["bool"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",4,[[["mmuflags"]],["mmuflags"]]],[11,"default","","",0,[[],["generalregs"]]],[11,"partial_cmp","","",4,[[["mmuflags"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",4,[[["mmuflags"],["self"]],["bool"]]],[11,"le","","",4,[[["mmuflags"],["self"]],["bool"]]],[11,"gt","","",4,[[["mmuflags"],["self"]],["bool"]]],[11,"ge","","",4,[[["mmuflags"],["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["mmuflags"]]],[11,"clone","","",0,[[["self"]],["generalregs"]]],[11,"sub_assign","","Disables all flags enabled in the set.",4,[[["self"],["mmuflags"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",4,[[["mmuflags"]],["mmuflags"]]],[11,"from_iter","","",4,[[["t"]],["mmuflags"]]],[11,"bitor_assign","","Adds the set of flags.",4,[[["self"],["mmuflags"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitor","","Returns the union of the two sets of flags.",4,[[["mmuflags"]],["mmuflags"]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",4,[[["mmuflags"]],["mmuflags"]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"not","","Returns the complement of this set of flags.",4,[[],["mmuflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",4,[[["self"],["mmuflags"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",4,[[["self"],["mmuflags"]]]],[11,"drop","","",3,[[["self"]]]],[11,"fmt","","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"new_fn","","",0,[[["usize"]],["generalregs"]]],[11,"clone","","",0,[[["self"],["usize"]],["generalregs"]]],[11,"fork","","",0,[[["self"]],["generalregs"]]],[18,"READ","","",4,null],[18,"WRITE","","",4,null],[18,"EXECUTE","","",4,null],[11,"empty","","Returns an empty set of flags",4,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",4,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",4,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",4,[[["usize"]],[["option",["mmuflags"]],["mmuflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",4,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",4,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",4,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",4,[[["self"],["mmuflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",4,[[["self"],["mmuflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",4,[[["self"],["mmuflags"]]]],[11,"remove","","Removes the specified flags in-place.",4,[[["self"],["mmuflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",4,[[["self"],["mmuflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",4,[[["self"],["mmuflags"],["bool"]]]]],"p":[[3,"GeneralRegs"],[3,"Thread"],[3,"PageTable"],[3,"PhysFrame"],[3,"MMUFlags"]]};
searchIndex["linux_loader"] = {"doc":"","i":[[5,"run","linux_loader","",null,[[["str"],["string"],["arc",["filesystem"]],["filesystem"],["vec",["string"]]],[["process"],["arc",["process"]]]]]],"p":[]};
searchIndex["linux_object"] = {"doc":"Linux kernel objects","i":[[0,"error","linux_object","",null,null],[4,"LxError","linux_object::error","",null,null],[13,"EUNDEF","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ECONNREFUSED","","",0,null],[6,"LxResult","","",null,null],[6,"SysResult","","",null,null],[0,"fs","linux_object","",null,null],[0,"vfs","linux_object::fs","",null,null],[8,"INode","linux_object::fs::vfs","Abstract file system object such as file or directory.",null,null],[10,"read_at","","Read bytes at `offset` into `buf`, return the number of…",1,[[["self"],["usize"]],[["result",["usize","fserror"]],["usize"],["fserror"]]]],[10,"write_at","","Write bytes at `offset` from `buf`, return the number of…",1,[[["self"],["usize"]],[["result",["usize","fserror"]],["usize"],["fserror"]]]],[10,"poll","","Poll the events, return a bitmap of events.",1,[[["self"]],[["pollstatus"],["fserror"],["result",["pollstatus","fserror"]]]]],[11,"metadata","","Get metadata of the INode",1,[[["self"]],[["metadata"],["result",["metadata","fserror"]],["fserror"]]]],[11,"set_metadata","","Set metadata of the INode",1,[[["metadata"],["self"]],[["result",["fserror"]],["fserror"]]]],[11,"sync_all","","Sync all data and metadata",1,[[["self"]],[["result",["fserror"]],["fserror"]]]],[11,"sync_data","","Sync data (not include metadata)",1,[[["self"]],[["result",["fserror"]],["fserror"]]]],[11,"resize","","Resize the file",1,[[["self"],["usize"]],[["result",["fserror"]],["fserror"]]]],[11,"create","","Create a new INode in the directory",1,[[["str"],["filetype"],["u32"],["self"]],[["arc",["inode"]],["fserror"],["result",["arc","fserror"]]]]],[11,"create2","","Create a new INode in the directory, with a data field for…",1,[[["str"],["filetype"],["u32"],["usize"],["self"]],[["arc",["inode"]],["fserror"],["result",["arc","fserror"]]]]],[11,"link","","Create a hard link `name` to `other`",1,[[["str"],["self"],["arc"]],[["result",["fserror"]],["fserror"]]]],[11,"unlink","","Delete a hard link `name`",1,[[["str"],["self"]],[["result",["fserror"]],["fserror"]]]],[11,"move_","","Move INode `self/old_name` to `target/new_name`. If…",1,[[["str"],["arc"],["self"]],[["result",["fserror"]],["fserror"]]]],[11,"find","","Find the INode `name` in the directory",1,[[["str"],["self"]],[["arc",["inode"]],["fserror"],["result",["arc","fserror"]]]]],[11,"get_entry","","Get the name of directory entry",1,[[["self"],["usize"]],[["result",["string","fserror"]],["string"],["fserror"]]]],[11,"io_control","","Control device",1,[[["u32"],["self"],["usize"]],[["result",["fserror"]],["fserror"]]]],[11,"fs","","Get the file system of the INode",1,[[["self"]],[["filesystem"],["arc",["filesystem"]]]]],[10,"as_any_ref","","This is used to implement dynamics cast. Simply return…",1,[[["self"]],["any"]]],[4,"IOCTLError","","",null,null],[13,"NotValidFD","","",2,null],[13,"NotValidMemory","","",2,null],[13,"NotValidParam","","",2,null],[13,"NotCharDevice","","",2,null],[3,"PollStatus","","",null,null],[12,"read","","",3,null],[12,"write","","",3,null],[12,"error","","",3,null],[3,"Metadata","","Metadata of INode",null,null],[12,"dev","","Device ID",4,null],[12,"inode","","Inode number",4,null],[12,"size","","Size in bytes",4,null],[12,"blk_size","","A file system-specific preferred I/O block size for this…",4,null],[12,"blocks","","Size in blocks",4,null],[12,"atime","","Time of last access",4,null],[12,"mtime","","Time of last modification",4,null],[12,"ctime","","Time of last change",4,null],[12,"type_","","Type of file",4,null],[12,"mode","","Permission",4,null],[12,"nlinks","","Number of hard links",4,null],[12,"uid","","User ID",4,null],[12,"gid","","Group ID",4,null],[12,"rdev","","Raw device id e.g. /dev/null: makedev(0x1, 0x3)",4,null],[3,"Timespec","","",null,null],[12,"sec","","",5,null],[12,"nsec","","",5,null],[4,"FileType","","",null,null],[13,"File","","",6,null],[13,"Dir","","",6,null],[13,"SymLink","","",6,null],[13,"CharDevice","","",6,null],[13,"BlockDevice","","",6,null],[13,"NamedPipe","","",6,null],[13,"Socket","","",6,null],[3,"FsInfo","","Metadata of FileSystem",null,null],[12,"bsize","","File system block size",7,null],[12,"frsize","","Fundamental file system block size",7,null],[12,"blocks","","Total number of blocks on file system in units of `frsize`",7,null],[12,"bfree","","Total number of free blocks",7,null],[12,"bavail","","Number of free blocks available to non-privileged process",7,null],[12,"files","","Total number of file serial numbers",7,null],[12,"ffree","","Total number of free file serial numbers",7,null],[12,"namemax","","Maximum filename length",7,null],[4,"FsError","","",null,null],[13,"NotSupported","","",8,null],[13,"NotFile","","",8,null],[13,"IsDir","","",8,null],[13,"NotDir","","",8,null],[13,"EntryNotFound","","",8,null],[13,"EntryExist","","",8,null],[13,"NotSameFs","","",8,null],[13,"InvalidParam","","",8,null],[13,"NoDeviceSpace","","",8,null],[13,"DirRemoved","","",8,null],[13,"DirNotEmpty","","",8,null],[13,"WrongFs","","",8,null],[13,"DeviceError","","",8,null],[13,"IOCTLError","","",8,null],[13,"NoDevice","","",8,null],[13,"Again","","",8,null],[13,"SymLoop","","",8,null],[13,"Busy","","",8,null],[6,"Result","","",null,null],[8,"FileSystem","","Abstract file system",null,null],[10,"sync","","Sync all data to the storage",9,[[["self"]],[["result",["fserror"]],["fserror"]]]],[10,"root_inode","","Get the root INode of the file system",9,[[["self"]],[["arc",["inode"]],["inode"]]]],[10,"info","","Get the file system information",9,[[["self"]],["fsinfo"]]],[5,"make_rdev","","",null,[[["usize"]],["usize"]]],[3,"File","linux_object::fs","",null,null],[12,"path","","",10,null],[3,"OpenOptions","","",null,null],[12,"read","","",11,null],[12,"write","","",11,null],[12,"append","","Before each write, the file offset is positioned at the…",11,null],[12,"nonblock","","",11,null],[3,"Pseudo","","",null,null],[3,"RandomINodeData","","",null,null],[3,"RandomINode","","",null,null],[3,"Stdout","","",null,null],[3,"FileDesc","","",null,null],[4,"SeekFrom","","",null,null],[13,"Start","","",12,null],[13,"End","","",12,null],[13,"Current","","",12,null],[5,"create_root_fs","","",null,[[["filesystem"],["arc",["filesystem"]]],[["arc",["inode"]],["inode"]]]],[5,"split_path","","Split a `path` str to `(base_path, file_name)`",null,[[["str"]]]],[11,"new","","",10,[[["arc",["inode"]],["inode"],["string"],["openoptions"]],["arc"]]],[11,"read","","",10,[[["self"]],[["lxresult",["usize"]],["usize"]]]],[11,"read_at","","",10,[[["self"],["u64"]],[["lxresult",["usize"]],["usize"]]]],[11,"write","","",10,[[["self"]],[["lxresult",["usize"]],["usize"]]]],[11,"write_at","","",10,[[["self"],["u64"]],[["lxresult",["usize"]],["usize"]]]],[11,"seek","","",10,[[["seekfrom"],["self"]],[["u64"],["lxresult",["u64"]]]]],[11,"set_len","","",10,[[["self"],["u64"]],["lxresult"]]],[11,"sync_all","","",10,[[["self"]],["lxresult"]]],[11,"sync_data","","",10,[[["self"]],["lxresult"]]],[11,"metadata","","",10,[[["self"]],[["lxresult",["metadata"]],["metadata"]]]],[11,"lookup_follow","","",10,[[["str"],["self"],["usize"]],[["arc",["inode"]],["lxresult",["arc"]]]]],[11,"read_entry","","",10,[[["self"]],[["string"],["lxresult",["string"]]]]],[11,"poll","","",10,[[["self"]],[["pollstatus"],["lxresult",["pollstatus"]]]]],[11,"io_control","","",10,[[["u32"],["self"],["usize"]],[["lxresult",["usize"]],["usize"]]]],[11,"inode","","",10,[[["self"]],[["arc",["inode"]],["inode"]]]],[11,"fcntl","","",10,[[["self"],["usize"]],[["lxresult",["usize"]],["usize"]]]],[11,"new","","",13,[[["str"],["filetype"]],["self"]]],[11,"new","","",14,[[["bool"]],["randominode"]]],[8,"FileLike","","Generic file interface",null,null],[10,"read","","",15,[[["self"]],[["lxresult",["usize"]],["usize"]]]],[10,"write","","",15,[[["self"]],[["lxresult",["usize"]],["usize"]]]],[10,"read_at","","",15,[[["self"],["u64"]],[["lxresult",["usize"]],["usize"]]]],[10,"write_at","","",15,[[["self"],["u64"]],[["lxresult",["usize"]],["usize"]]]],[10,"poll","","",15,[[["self"]],[["pollstatus"],["lxresult",["pollstatus"]]]]],[10,"ioctl","","",15,[[["self"],["usize"]],[["lxresult",["usize"]],["usize"]]]],[10,"fcntl","","",15,[[["self"],["usize"]],[["lxresult",["usize"]],["usize"]]]],[8,"INodeExt","","",null,null],[10,"read_as_vec","","",16,[[["self"]],[["vec",["u8"]],["result",["vec"]]]]],[11,"is","","Returns true if the trait object wraps an object of type…",15,[[["self"]],["bool"]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the…",15,[[["box"]],[["box"],["box"],["result",["box","box"]]]]],[11,"downcast_rc","","Returns an `Rc`-ed object from an `Rc`-ed trait object if…",15,[[["rc"]],[["result",["rc","rc"]],["rc"],["rc"]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object…",15,[[["self"]],[["__t"],["option"]]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait…",15,[[["self"]],[["__t"],["option"]]]],[11,"downcast_arc","","Returns an `Arc`-ed object from an `Arc`-ed trait object…",15,[[["arc"]],[["result",["arc","arc"]],["arc"],["arc"]]]],[18,"CWD","","Pathname is interpreted relative to the current working…",17,null],[0,"loader","linux_object","",null,null],[3,"LinuxElfLoader","linux_object::loader","Linux ELF Program Loader.",null,null],[12,"syscall_entry","","",18,null],[12,"stack_pages","","",18,null],[12,"root_inode","","",18,null],[11,"load","","",18,[[["string"],["arc"],["self"],["vec",["string"]]],["lxresult"]]],[0,"process","linux_object","Linux Process",null,null],[3,"LinuxProcess","linux_object::process","Linux specific process information.",null,null],[12,"cwd","","Current Working Directory",19,null],[12,"exec_path","","Execute path",19,null],[5,"wait_child","","Wait for state changes in a child of the calling process,…",null,[[["koid"],["bool"],["arc"]]]],[5,"wait_child_any","","Wait for state changes in a child of the calling process.",null,[[["bool"],["arc"]]]],[6,"ExitCode","","",null,null],[8,"ProcessExt","","",null,null],[10,"create_linux","","",20,[[["arc"],["filesystem"],["arc",["filesystem"]]],[["zxresult",["arc"]],["arc"]]]],[10,"lock_linux","","",20,[[["self"]],[["mutexguard",["linuxprocess"]],["linuxprocess"]]]],[10,"vfork_from","","",20,[[["arc"]],[["zxresult",["arc"]],["arc"]]]],[11,"new","","Create a new process.",19,[[["filesystem"],["arc",["filesystem"]]],["self"]]],[11,"get_futex","","Get futex object.",19,[[["self"],["virtaddr"]],[["futex"],["arc",["futex"]]]]],[11,"add_file","","Add a file to the file descriptor table.",19,[[["self"],["arc",["filelike"]],["filelike"]],[["lxresult",["filedesc"]],["filedesc"]]]],[11,"add_file_at","","Add a file to the file descriptor table at given `fd`.",19,[[["filelike"],["self"],["filedesc"],["arc",["filelike"]]]]],[11,"get_file","","Get the `File` with given `fd`.",19,[[["filedesc"],["self"]],[["lxresult",["arc"]],["arc",["file"]]]]],[11,"get_file_like","","Get the `FileLike` with given `fd`.",19,[[["filedesc"],["self"]],[["arc",["filelike"]],["lxresult",["arc"]]]]],[11,"close_file","","Close file descriptor `fd`.",19,[[["self"],["filedesc"]],["lxresult"]]],[11,"root_inode","","Get root INode of the process.",19,[[["self"]],["arc"]]],[11,"parent","","Get parent process.",19,[[["self"]],[["option",["arc"]],["arc",["process"]]]]],[0,"thread","linux_object","Linux Thread",null,null],[3,"LinuxThread","linux_object::thread","Linux specific thread information.",null,null],[8,"ThreadExt","","",null,null],[10,"create_linux","","",21,[[["arc"]],[["zxresult",["arc"]],["arc"]]]],[10,"lock_linux","","",21,[[["self"]],[["mutexguard",["linuxthread"]],["linuxthread"]]]],[10,"set_tid_address","","",21,[[["useroutptr",["i32"]],["self"],["i32"]]]],[10,"exit_linux","","",21,[[["self"],["i32"]]]],[11,"from","linux_object::error","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",0,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]],[11,"from","linux_object::fs::vfs","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_any_arc","","",2,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",2,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",2,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",2,[[["self"]],["any"]]],[11,"as_any_mut","","",2,[[["self"]],["any"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"into_any_arc","","",3,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",3,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",3,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",3,[[["self"]],["any"]]],[11,"as_any_mut","","",3,[[["self"]],["any"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"into_any_arc","","",4,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",4,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",4,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",4,[[["self"]],["any"]]],[11,"as_any_mut","","",4,[[["self"]],["any"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"into_any_arc","","",5,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",5,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",5,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",5,[[["self"]],["any"]]],[11,"as_any_mut","","",5,[[["self"]],["any"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"into_any_arc","","",6,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",6,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",6,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",6,[[["self"]],["any"]]],[11,"as_any_mut","","",6,[[["self"]],["any"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"into_any_arc","","",7,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",7,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",7,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",7,[[["self"]],["any"]]],[11,"as_any_mut","","",7,[[["self"]],["any"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"into_any_arc","","",8,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",8,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",8,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",8,[[["self"]],["any"]]],[11,"as_any_mut","","",8,[[["self"]],["any"]]],[11,"from","linux_object::fs","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"into_any_arc","","",10,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",10,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",10,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",10,[[["self"]],["any"]]],[11,"as_any_mut","","",10,[[["self"]],["any"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"into_any_arc","","",11,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",11,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",11,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",11,[[["self"]],["any"]]],[11,"as_any_mut","","",11,[[["self"]],["any"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"into_any_arc","","",13,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",13,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",13,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",13,[[["self"]],["any"]]],[11,"as_any_mut","","",13,[[["self"]],["any"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"into_any_arc","","",22,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",22,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",22,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",22,[[["self"]],["any"]]],[11,"as_any_mut","","",22,[[["self"]],["any"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"into_any_arc","","",14,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",14,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",14,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",14,[[["self"]],["any"]]],[11,"as_any_mut","","",14,[[["self"]],["any"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"into_any_arc","","",23,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",23,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",23,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",23,[[["self"]],["any"]]],[11,"as_any_mut","","",23,[[["self"]],["any"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"into_any_arc","","",17,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",17,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",17,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",17,[[["self"]],["any"]]],[11,"as_any_mut","","",17,[[["self"]],["any"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"into_any_arc","","",12,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",12,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",12,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",12,[[["self"]],["any"]]],[11,"as_any_mut","","",12,[[["self"]],["any"]]],[11,"from","linux_object::loader","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"into_any_arc","","",18,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",18,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",18,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",18,[[["self"]],["any"]]],[11,"as_any_mut","","",18,[[["self"]],["any"]]],[11,"from","linux_object::process","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"into_any_arc","","",19,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",19,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",19,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",19,[[["self"]],["any"]]],[11,"as_any_mut","","",19,[[["self"]],["any"]]],[11,"from","linux_object::thread","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"into_any_arc","","",24,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",24,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",24,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",24,[[["self"]],["any"]]],[11,"as_any_mut","","",24,[[["self"]],["any"]]],[11,"fmt","linux_object::fs::vfs","",6,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",3,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",8,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",5,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",7,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",8,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","","",6,[[["self"]],["filetype"]]],[11,"clone","","",5,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["metadata"]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"eq","","",8,[[["self"],["fserror"]],["bool"]]],[11,"eq","","",6,[[["filetype"],["self"]],["bool"]]],[11,"eq","","",4,[[["metadata"],["self"]],["bool"]]],[11,"ne","","",4,[[["metadata"],["self"]],["bool"]]],[11,"eq","","",5,[[["timespec"],["self"]],["bool"]]],[11,"ne","","",5,[[["timespec"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["timespec"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",5,[[["timespec"],["self"]],["bool"]]],[11,"le","","",5,[[["timespec"],["self"]],["bool"]]],[11,"gt","","",5,[[["timespec"],["self"]],["bool"]]],[11,"ge","","",5,[[["timespec"],["self"]],["bool"]]],[11,"cmp","","",5,[[["timespec"],["self"]],["ordering"]]],[11,"from","","",8,[[["error"]],["fserror"]]],[11,"from","","",4,[[["metadata"]],["metadata"]]],[11,"from","","",8,[[["deverror"]],["fserror"]]],[11,"default","","",3,[[],["pollstatus"]]],[11,"from","","",6,[[["filetype"]],["filetype"]]],[11,"read","linux_object::fs","",10,[[["self"]],[["lxresult",["usize"]],["usize"]]]],[11,"write","","",10,[[["self"]],[["lxresult",["usize"]],["usize"]]]],[11,"read_at","","",10,[[["self"],["u64"]],[["lxresult",["usize"]],["usize"]]]],[11,"write_at","","",10,[[["self"],["u64"]],[["lxresult",["usize"]],["usize"]]]],[11,"poll","","",10,[[["self"]],[["pollstatus"],["lxresult",["pollstatus"]]]]],[11,"ioctl","","",10,[[["self"],["usize"]],[["lxresult",["usize"]],["usize"]]]],[11,"fcntl","","",10,[[["self"],["usize"]],[["lxresult",["usize"]],["usize"]]]],[11,"read_as_vec","linux_object::fs::vfs","",1,[[["self"]],[["vec",["u8"]],["result",["vec"]]]]],[11,"from","linux_object::error","",0,[[["zxerror"]],["self"]]],[11,"from","","",0,[[["fserror"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","linux_object::fs","",17,[[["usize"]],["self"]]],[11,"fmt","linux_object::error","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","linux_object::fs","",10,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","linux_object::error","",0,[[["formatter"],["self"]],["result"]]],[11,"eq","linux_object::fs","",17,[[["self"],["filedesc"]],["bool"]]],[11,"ne","","",17,[[["self"],["filedesc"]],["bool"]]],[11,"cmp","","",17,[[["self"],["filedesc"]],["ordering"]]],[11,"partial_cmp","","",17,[[["self"],["filedesc"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",17,[[["self"],["filedesc"]],["bool"]]],[11,"le","","",17,[[["self"],["filedesc"]],["bool"]]],[11,"gt","","",17,[[["self"],["filedesc"]],["bool"]]],[11,"ge","","",17,[[["self"],["filedesc"]],["bool"]]],[11,"try_from","","",17,[[["str"]],["lxresult"]]],[11,"into","","",17,[[],["usize"]]],[11,"clone","","",14,[[["self"]],["randominode"]]],[11,"clone","","",17,[[["self"]],["filedesc"]]],[11,"default","","",23,[[],["stdout"]]],[11,"read_at","","",13,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"write_at","","",13,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"poll","","",13,[[["self"]],[["result",["pollstatus"]],["pollstatus"]]]],[11,"metadata","","",13,[[["self"]],[["result",["metadata"]],["metadata"]]]],[11,"as_any_ref","","",13,[[["self"]],["any"]]],[11,"read_at","","",14,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"write_at","","",14,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"poll","","",14,[[["self"]],[["result",["pollstatus"]],["pollstatus"]]]],[11,"metadata","","",14,[[["self"]],[["result",["metadata"]],["metadata"]]]],[11,"as_any_ref","","",14,[[["self"]],["any"]]],[11,"read_at","","",23,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"write_at","","",23,[[["self"],["usize"]],[["result",["usize"]],["usize"]]]],[11,"poll","","",23,[[["self"]],[["result",["pollstatus"]],["pollstatus"]]]],[11,"io_control","","",23,[[["u32"],["self"],["usize"]],["result"]]],[11,"as_any_ref","","",23,[[["self"]],["any"]]],[11,"id","","",10,[[["self"]],["koid"]]],[11,"type_name","","",10,[[["self"]],["str"]]],[11,"signal","","",10,[[["self"]],["signal"]]],[11,"signal_set","","",10,[[["self"],["signal"]]]],[11,"add_signal_callback","","",10,[[["self"],["signalhandler"]]]],[11,"downcast_ref","linux_object::fs::vfs","Downcast the INode to specific struct",1,[[["self"]],[["option"],["t"]]]],[11,"list","","Get all directory entries as a Vec",1,[[["self"]],[["vec",["string"]],["result",["vec","fserror"]],["fserror"]]]],[11,"lookup","","Lookup path from current INode, and do not follow symlinks",1,[[["str"],["self"]],[["arc",["inode"]],["fserror"],["result",["arc","fserror"]]]]],[11,"lookup_follow","","Lookup path from current INode, and follow symlinks at…",1,[[["str"],["self"],["usize"]],[["arc",["inode"]],["fserror"],["result",["arc","fserror"]]]]],[11,"lookup_inode_at","linux_object::process","Lookup INode from the process.",19,[[["str"],["filedesc"],["self"],["bool"]],[["arc",["inode"]],["lxresult",["arc"]]]]],[11,"lookup_inode","","",19,[[["str"],["self"]],[["arc",["inode"]],["lxresult",["arc"]]]]]],"p":[[4,"LxError"],[8,"INode"],[4,"IOCTLError"],[3,"PollStatus"],[3,"Metadata"],[3,"Timespec"],[4,"FileType"],[3,"FsInfo"],[4,"FsError"],[8,"FileSystem"],[3,"File"],[3,"OpenOptions"],[4,"SeekFrom"],[3,"Pseudo"],[3,"RandomINode"],[8,"FileLike"],[8,"INodeExt"],[3,"FileDesc"],[3,"LinuxElfLoader"],[3,"LinuxProcess"],[8,"ProcessExt"],[8,"ThreadExt"],[3,"RandomINodeData"],[3,"Stdout"],[3,"LinuxThread"]]};
searchIndex["linux_syscall"] = {"doc":"Linux syscall implementations","i":[[3,"Syscall","linux_syscall","",null,null],[12,"thread","","",0,null],[12,"syscall_entry","","",0,null],[12,"regs","","",0,null],[12,"exit","","Set `true` to exit current task.",0,null],[11,"sys_getcwd","","",0,[[["useroutptr",["u8"]],["usize"],["self"],["u8"]],["sysresult"]]],[11,"sys_chdir","","",0,[[["userinptr",["u8"]],["self"],["u8"]],["sysresult"]]],[11,"sys_mkdir","","",0,[[["userinptr",["u8"]],["usize"],["self"],["u8"]],["sysresult"]]],[11,"sys_mkdirat","","",0,[[["userinptr",["u8"]],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_rmdir","","",0,[[["userinptr",["u8"]],["self"],["u8"]],["sysresult"]]],[11,"sys_getdents64","","",0,[[["u8"],["usize"],["filedesc"],["useroutptr",["u8"]],["self"]],["sysresult"]]],[11,"sys_link","","",0,[[["userinptr",["u8"]],["self"],["u8"]],["sysresult"]]],[11,"sys_linkat","","",0,[[["userinptr",["u8"]],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_unlink","","",0,[[["userinptr",["u8"]],["self"],["u8"]],["sysresult"]]],[11,"sys_unlinkat","","",0,[[["userinptr",["u8"]],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_rename","","",0,[[["userinptr",["u8"]],["self"],["u8"]],["sysresult"]]],[11,"sys_renameat","","",0,[[["userinptr",["u8"]],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_readlink","","",0,[[["userinptr",["u8"]],["useroutptr",["u8"]],["usize"],["self"],["u8"]],["sysresult"]]],[11,"sys_readlinkat","","",0,[[["userinptr",["u8"]],["useroutptr",["u8"]],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_open","","",0,[[["userinptr",["u8"]],["usize"],["self"],["u8"]],["sysresult"]]],[11,"sys_openat","","",0,[[["userinptr",["u8"]],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_close","","",0,[[["self"],["filedesc"]],["sysresult"]]],[11,"sys_dup2","","",0,[[["self"],["filedesc"]],["sysresult"]]],[11,"sys_read","","",0,[[["u8"],["usize"],["filedesc"],["useroutptr",["u8"]],["self"]],["sysresult"]]],[11,"sys_write","","",0,[[["userinptr",["u8"]],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_pread","","",0,[[["u8"],["u64"],["usize"],["filedesc"],["useroutptr",["u8"]],["self"]],["sysresult"]]],[11,"sys_pwrite","","",0,[[["userinptr",["u8"]],["u64"],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_readv","","",0,[[["usize"],["filedesc"],["userinptr",["iovec"]],["iovec",["out"]],["self"]],["sysresult"]]],[11,"sys_writev","","",0,[[["iovec",["in"]],["usize"],["filedesc"],["userinptr",["iovec"]],["self"]],["sysresult"]]],[11,"sys_lseek","","",0,[[["i64"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_truncate","","",0,[[["userinptr",["u8"]],["usize"],["self"],["u8"]],["sysresult"]]],[11,"sys_ftruncate","","",0,[[["usize"],["self"],["filedesc"]],["sysresult"]]],[11,"sys_sendfile","","",0,[[["u64"],["usize"],["filedesc"],["userinoutptr",["u64"]],["self"]],["sysresult"]]],[11,"sys_copy_file_range","","",0,[[["u64"],["usize"],["filedesc"],["userinoutptr",["u64"]],["self"]],["sysresult"]]],[11,"sys_sync","","",0,[[["self"]],["sysresult"]]],[11,"sys_fsync","","",0,[[["self"],["filedesc"]],["sysresult"]]],[11,"sys_fdatasync","","",0,[[["self"],["filedesc"]],["sysresult"]]],[11,"sys_ioctl","","",0,[[["usize"],["filedesc"],["self"]],["sysresult"]]],[11,"sys_fcntl","","",0,[[["usize"],["filedesc"],["self"]],["sysresult"]]],[11,"sys_access","","",0,[[["userinptr",["u8"]],["usize"],["self"],["u8"]],["sysresult"]]],[11,"sys_faccessat","","",0,[[["userinptr",["u8"]],["usize"],["filedesc"],["self"],["u8"]],["sysresult"]]],[11,"sys_lstat","","",0,[[["userinptr",["u8"]],["useroutptr",["stat"]],["stat"],["self"],["u8"]],["sysresult"]]],[11,"sys_fstat","","",0,[[["stat"],["filedesc"],["useroutptr",["stat"]],["self"]],["sysresult"]]],[11,"sys_fstatat","","",0,[[["userinptr",["u8"]],["useroutptr",["stat"]],["stat"],["filedesc"],["usize"],["self"],["u8"]],["sysresult"]]],[11,"sys_stat","","",0,[[["userinptr",["u8"]],["useroutptr",["stat"]],["stat"],["self"],["u8"]],["sysresult"]]],[11,"sys_arch_prctl","","",0,[[["self"],["usize"],["i32"]],["sysresult"]]],[11,"sys_uname","","",0,[[["u8"],["self"],["useroutptr",["u8"]]],["sysresult"]]],[11,"sys_futex","","",0,[[["self"],["usize"],["u32"],["i32"],["timespec"],["userinptr",["timespec"]]]]],[11,"sys_fork","","Fork the current process. Return the child's PID.",0,[[["self"]]]],[11,"sys_vfork","","",0,[[["self"]]]],[11,"sys_clone","","Create a new thread in the current process. The new…",0,[[["usize"],["i32"],["self"],["useroutptr",["i32"]]],["sysresult"]]],[11,"sys_wait4","","Wait for a child process exited.",0,[[["self"],["u32"],["i32"],["useroutptr",["i32"]]]]],[11,"sys_execve","","Replaces the current ** process ** with a new process image",0,[[["userinptr",["u8"]],["userinptr",["userinptr"]],["self"],["u8"]],["sysresult"]]],[11,"sys_gettid","","Get the current thread ID.",0,[[["self"]],["sysresult"]]],[11,"sys_getpid","","Get the current process ID.",0,[[["self"]],["sysresult"]]],[11,"sys_getppid","","Get the parent process ID.",0,[[["self"]],["sysresult"]]],[11,"sys_exit","","Exit the current thread",0,[[["self"],["i32"]],["sysresult"]]],[11,"sys_exit_group","","Exit the current thread group (i.e. process)",0,[[["self"],["i32"]],["sysresult"]]],[11,"sys_set_tid_address","","",0,[[["useroutptr",["i32"]],["self"],["i32"]],["sysresult"]]],[11,"sys_mmap","","",0,[[["usize"],["filedesc"],["self"],["u64"]],["sysresult"]]],[11,"sys_mprotect","","",0,[[["self"],["usize"]],["sysresult"]]],[11,"sys_munmap","","",0,[[["self"],["usize"]],["sysresult"]]],[11,"syscall","","",0,[[["u32"],["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",0,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]]],"p":[[3,"Syscall"]]};
searchIndex["zircon_loader"] = {"doc":"","i":[[5,"run_userboot","zircon_loader","",null,[[["str"]],[["process"],["arc",["process"]]]]],[8,"ElfExt","","",null,null],[10,"load_segment_size","","",0,[[["self"]],["usize"]]],[10,"get_symbol_address","","",0,[[["str"],["self"]],[["option",["u64"]],["u64"]]]],[8,"VmarExt","","",null,null],[10,"load_from_elf","","",1,[[["self"],["elffile"]],[["zxresult",["arc"]],["arc",["vmobjectpaged"]]]]]],"p":[[8,"ElfExt"],[8,"VmarExt"]]};
searchIndex["zircon_object"] = {"doc":"Zircon kernel objects","i":[[4,"ZxError","zircon_object","Zircon statuses are signed 32 bit integers. The space of…",null,null],[13,"OK","","",0,null],[13,"INTERNAL","","The system encountered an otherwise unspecified error…",0,null],[13,"NOT_SUPPORTED","","The operation is not implemented, supported, or enabled.",0,null],[13,"NO_RESOURCES","","The system was not able to allocate some resource needed…",0,null],[13,"NO_MEMORY","","The system was not able to allocate memory needed for the…",0,null],[13,"INTERNAL_INTR_RETRY","","The system call was interrupted, but should be retried.…",0,null],[13,"INVALID_ARGS","","an argument is invalid, ex. null pointer",0,null],[13,"BAD_HANDLE","","A specified handle value does not refer to a handle.",0,null],[13,"WRONG_TYPE","","The subject of the operation is the wrong type to perform…",0,null],[13,"BAD_SYSCALL","","The specified syscall number is invalid.",0,null],[13,"OUT_OF_RANGE","","An argument is outside the valid range for this operation.",0,null],[13,"BUFFER_TOO_SMALL","","A caller provided buffer is too small for this operation.",0,null],[13,"BAD_STATE","","operation failed because the current state of the object…",0,null],[13,"TIMED_OUT","","The time limit for the operation elapsed before the…",0,null],[13,"SHOULD_WAIT","","The operation cannot be performed currently but…",0,null],[13,"CANCELED","","The in-progress operation (e.g. a wait) has been canceled.",0,null],[13,"PEER_CLOSED","","The operation failed because the remote end of the subject…",0,null],[13,"NOT_FOUND","","The requested entity is not found.",0,null],[13,"ALREADY_EXISTS","","An object with the specified identifier already exists.…",0,null],[13,"ALREADY_BOUND","","The operation failed because the named entity is already…",0,null],[13,"UNAVAILABLE","","The subject of the operation is currently unable to…",0,null],[13,"ACCESS_DENIED","","The caller did not have permission to perform the…",0,null],[13,"IO","","Otherwise unspecified error occurred during I/O.",0,null],[13,"IO_REFUSED","","The entity the I/O operation is being performed on…",0,null],[13,"IO_DATA_INTEGRITY","","The data in the operation failed an integrity check and is…",0,null],[13,"IO_DATA_LOSS","","The data in the operation is currently unavailable and may…",0,null],[13,"IO_NOT_PRESENT","","The device is no longer available (has been unplugged from…",0,null],[13,"IO_OVERRUN","","More data was received from the device than expected.…",0,null],[13,"IO_MISSED_DEADLINE","","An operation did not complete within the required…",0,null],[13,"IO_INVALID","","The data in the operation is invalid parameter or is out…",0,null],[13,"BAD_PATH","","Path name is too long.",0,null],[13,"NOT_DIR","","Object is not a directory or does not support directory…",0,null],[13,"NOT_FILE","","Object is not a regular file.",0,null],[13,"FILE_BIG","","This operation would cause a file to exceed a…",0,null],[13,"NO_SPACE","","Filesystem or device space is exhausted.",0,null],[13,"NOT_EMPTY","","Directory is not empty.",0,null],[13,"STOP","","Do not call again. Example: A notification callback will…",0,null],[13,"NEXT","","Advance to the next item. Example: A notification callback…",0,null],[13,"ASYNC","","Ownership of the item has moved to an asynchronous worker.",0,null],[13,"PROTOCOL_NOT_SUPPORTED","","Specified protocol is not supported.",0,null],[13,"ADDRESS_UNREACHABLE","","Host is unreachable.",0,null],[13,"ADDRESS_IN_USE","","Address is being used by someone else.",0,null],[13,"NOT_CONNECTED","","Socket is not connected.",0,null],[13,"CONNECTION_REFUSED","","Remote peer rejected the connection.",0,null],[13,"CONNECTION_RESET","","Connection was reset.",0,null],[13,"CONNECTION_ABORTED","","Connection was aborted.",0,null],[0,"debuglog","","",null,null],[3,"DebugLog","zircon_object::debuglog","",null,null],[11,"create","","",1,[[["u32"]],["arc"]]],[11,"write","","",1,[[["str"],["u32"],["self"]],[["zxresult",["usize"]],["usize"]]]],[0,"ipc","zircon_object","Objects for IPC.",null,null],[3,"Channel_","zircon_object::ipc","Bidirectional interprocess communication",null,null],[3,"MessagePacket","","",null,null],[12,"data","","",2,null],[12,"handles","","",2,null],[11,"create","","Create a channel and return a pair of its endpoints",3,[[]]],[11,"read","","Read a packet from the channel",3,[[["self"]],["zxresult"]]],[11,"write","","Write a packet to the channel",3,[[["self"],["t"]],["zxresult"]]],[6,"Channel","","",null,null],[0,"object","zircon_object","Kernel object basis.",null,null],[3,"Handle","zircon_object::object","A Handle is how a specific process refers to a specific…",null,null],[12,"object","","",4,null],[12,"rights","","",4,null],[3,"Rights","","Rights are associated with handles and convey privileges…",null,null],[3,"Signal","","Signals that waitable kernel objects expose to applications.",null,null],[3,"KObjectBase","","The base struct of a kernel object.",null,null],[12,"id","","",5,null],[3,"DummyObject","","Empty kernel object. Just for test.",null,null],[5,"wait_signal_many_async","","Asynchronous wait signal for multiple objects.",null,[[]]],[11,"new","","",4,[[["rights"],["arc",["kernelobject"]],["kernelobject"]],["self"]]],[18,"DUPLICATE","","Allows handle duplication via `zx_handle_duplicate()`.",6,null],[18,"TRANSFER","","Allows handle transfer via `zx_channel_write()`.",6,null],[18,"READ","","Allows reading of data from containers (channels, sockets,…",6,null],[18,"WRITE","","Allows writing of data to containers (channels, sockets,…",6,null],[18,"EXECUTE","","Allows mapping as executable if `Rights::MAP` is also…",6,null],[18,"MAP","","Allows mapping of a VM object into an address space.",6,null],[18,"GET_PROPERTY","","Allows property inspection via `zx_object_get_property()`.",6,null],[18,"SET_PROPERTY","","Allows property modification via `zx_object_set_property()`.",6,null],[18,"ENUMERATE","","Allows enumerating child objects via…",6,null],[18,"DESTROY","","Allows termination of task objects via `zx_task_kill()`.",6,null],[18,"SET_POLICY","","Allows policy modification via `zx_job_set_policy()`.",6,null],[18,"GET_POLICY","","Allows policy inspection via `zx_job_get_policy()`.",6,null],[18,"SIGNAL","","Allows use of `zx_object_signal()`.",6,null],[18,"SIGNAL_PEER","","Allows use of `zx_object_signal_peer()`.",6,null],[18,"WAIT","","Allows use of `zx_object_wait_one()`,…",6,null],[18,"INSPECT","","Allows inspection via `zx_object_get_info()`.",6,null],[18,"MANAGE_JOB","","Allows creation of processes, subjobs, etc.",6,null],[18,"MANAGE_PROCESS","","Allows creation of threads, etc.",6,null],[18,"MANAGE_THREAD","","Allows suspending/resuming threads, etc.",6,null],[18,"APPLY_PROFILE","","",6,null],[18,"SAME_RIGHTS","","",6,null],[18,"BASIC","","",6,null],[18,"IO","","",6,null],[18,"PROPERTY","","",6,null],[18,"POLICY","","",6,null],[18,"DEFAULT_CHANNEL","","",6,null],[18,"DEFAULT_PROCESS","","",6,null],[18,"DEFAULT_VMO","","",6,null],[18,"DEFAULT_VMAR","","",6,null],[18,"DEFAULT_JOB","","",6,null],[18,"DEFAULT_RESOURCE","","",6,null],[18,"DEFAULT_LOG_WRITABLE","","",6,null],[18,"DEFAULT_LOG_READABLE","","",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["rights"]]],[11,"all","","Returns the set containing all flags.",6,[[],["rights"]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[["u32"]],[["option",["rights"]],["rights"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[["u32"]],["rights"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[["u32"]],["rights"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["rights"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["rights"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["rights"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["rights"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["rights"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["rights"],["self"],["bool"]]]],[18,"READABLE","","",7,null],[18,"WRITABLE","","",7,null],[18,"PEER_CLOSED","","",7,null],[18,"SIGNALED","","",7,null],[18,"HANDLE_CLOSED","","",7,null],[18,"USER_ALL","","",7,null],[18,"CLOCK_STARTED","","",7,null],[18,"SOCKET_PEER_WRITE_DISABLED","","",7,null],[18,"SOCKET_WRITE_DISABLED","","",7,null],[18,"SOCKET_READ_THRESHOLD","","",7,null],[18,"SOCKET_WRITE_THRESHOLD","","",7,null],[18,"TASK_TERMINATED","","",7,null],[18,"JOB_TERMINATED","","",7,null],[18,"JOB_NO_JOBS","","",7,null],[18,"JOB_NO_PROCESSES","","",7,null],[18,"PROCESS_TERMINATED","","",7,null],[18,"THREAD_TERMINATED","","",7,null],[18,"THREAD_RUNNING","","",7,null],[18,"THREAD_SUSPENDED","","",7,null],[18,"SIGCHLD","","",7,null],[11,"empty","","Returns an empty set of flags",7,[[],["signal"]]],[11,"all","","Returns the set containing all flags.",7,[[],["signal"]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",7,[[["u32"]],[["option",["signal"]],["signal"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",7,[[["u32"]],["signal"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",7,[[["u32"]],["signal"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",7,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",7,[[["signal"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",7,[[["signal"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["self"],["signal"]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["self"],["signal"]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["self"],["signal"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",7,[[["self"],["signal"],["bool"]]]],[6,"HandleValue","","The value refers to a Handle in user space.",null,null],[6,"KoID","","The type of kernel object ID.",null,null],[6,"SignalHandler","","The type of kernel object signal handler.",null,null],[17,"INVALID_HANDLE","","Invalid handle value.",null,null],[8,"KernelObject","","Common interface of a kernel object.",null,null],[10,"id","","",8,[[["self"]],["koid"]]],[10,"type_name","","",8,[[["self"]],["str"]]],[10,"signal","","",8,[[["self"]],["signal"]]],[10,"signal_set","","",8,[[["signal"],["self"]]]],[10,"add_signal_callback","","",8,[[["self"],["signalhandler"]]]],[11,"get_child","","",8,[[["self"],["koid"]],[["arc",["kernelobject"]],["zxresult",["arc"]]]]],[11,"is","","Returns true if the trait object wraps an object of type…",8,[[["self"]],["bool"]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the…",8,[[["box"]],[["box"],["box"],["result",["box","box"]]]]],[11,"downcast_rc","","Returns an `Rc`-ed object from an `Rc`-ed trait object if…",8,[[["rc"]],[["result",["rc","rc"]],["rc"],["rc"]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object…",8,[[["self"]],[["__t"],["option"]]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait…",8,[[["self"]],[["__t"],["option"]]]],[11,"downcast_arc","","Returns an `Arc`-ed object from an `Arc`-ed trait object…",8,[[["arc"]],[["result",["arc","arc"]],["arc"],["arc"]]]],[11,"new","","Create a new kernel object base.",5,[[],["self"]]],[11,"with_signal","","Create a kernel object base with initial `signal`.",5,[[["signal"]],["self"]]],[11,"signal","","Get the signal status.",5,[[["self"]],["signal"]]],[11,"signal_change","","Change signal status: first `clear` then `set` indicated…",5,[[["signal"],["self"]]]],[11,"signal_set","","Assert `signal`.",5,[[["signal"],["self"]]]],[11,"signal_clear","","Deassert `signal`.",5,[[["signal"],["self"]]]],[11,"add_signal_callback","","Add `callback` for signal status changes.",5,[[["self"],["signalhandler"]]]],[11,"wait_signal_async","","Asynchronous wait for one of `signal`.",8,[[["arc"],["signal"]]]],[11,"send_signal_to_port_async","","Once one of the `signal` asserted, push a packet with…",8,[[["arc"],["arc"],["signal"],["u64"]]]],[11,"new","","",9,[[],["arc"]]],[0,"resource","zircon_object","",null,null],[3,"Resource","zircon_object::resource","Address space rights and accounting.",null,null],[4,"ResourceKind","","ResourceKind definition from…",null,null],[13,"MMIO","","",10,null],[13,"IRQ","","",10,null],[13,"IOPORT","","",10,null],[13,"HYPERVISOR","","",10,null],[13,"ROOT","","",10,null],[13,"VMEX","","",10,null],[13,"SMC","","",10,null],[13,"COUNT","","",10,null],[11,"create","","Create a new `Resource`.",11,[[["str"],["resourcekind"]],["arc"]]],[11,"validate","","",11,[[["self"],["resourcekind"]],["zxresult"]]],[0,"signal","zircon_object","Objects for signaling and waiting.",null,null],[3,"EventPair","zircon_object::signal","Mutually signalable pair of events for concurrent…",null,null],[3,"Futex","","A primitive for creating userspace synchronization tools.",null,null],[3,"Port","","Signaling and mailbox primitive",null,null],[3,"PortPacket","","",null,null],[12,"key","","",12,null],[12,"status","","",12,null],[12,"data","","",12,null],[3,"Timer","","An object that may be signaled at some point in the future",null,null],[4,"PortPacketPayload","","",null,null],[13,"Signal","","",13,null],[13,"User","","",13,null],[11,"create","","Create a pair of event.",14,[[]]],[11,"peer","","Get the peer event.",14,[[["self"]],[["zxresult",["arc"]],["arc"]]]],[11,"new","","Create a new Futex.",15,[[["atomici32"]],["arc"]]],[11,"wait_async","","Wait on a futex asynchronously.",15,[[["arc"],["i32"]]]],[11,"wake","","Wake some number of threads waiting on a futex.",15,[[["self"],["usize"]],["usize"]]],[11,"new","","Create a new `Port`.",16,[[],["arc"]]],[11,"push","","Push a `packet` into the port.",16,[[["self"],["portpacket"]]]],[11,"wait_async","","Asynchronous wait until at least one packet is available,…",16,[[["arc"]]]],[11,"new","","Create a new `Timer`.",17,[[],["arc"]]],[11,"set","","Starts a one-shot timer that will fire when `deadline`…",17,[[["arc"],["duration"]]]],[11,"cancel","","Cancel the pending timer started by `set`.",17,[[["self"]]]],[6,"Event","","Signalable event for concurrent programming",null,null],[0,"task","zircon_object","Objects for Task Management.",null,null],[3,"Job","zircon_object::task","Control a group of processes",null,null],[3,"JobPolicy","","",null,null],[3,"BasicPolicy","","",null,null],[12,"condition","","",18,null],[12,"action","","",18,null],[3,"TimerSlackPolicy","","",null,null],[3,"Process","","Process abstraction",null,null],[3,"Thread","","Runnable / computation entity",null,null],[4,"SetPolicyOptions","","",null,null],[13,"Absolute","","Policy is applied for all conditions in policy or the call…",19,null],[13,"Relative","","Policy is applied for the conditions not specifically…",19,null],[4,"PolicyCondition","","",null,null],[13,"BadHandle","","A process under this job is attempting to issue a syscall…",20,null],[13,"WrongObject","","A process under this job is attempting to issue a syscall…",20,null],[13,"VmarWx","","A process under this job is attempting to map an address…",20,null],[13,"NewAny","","A special condition that stands for all of the above…",20,null],[13,"NewVMO","","A process under this job is attempting to create a new vm…",20,null],[13,"NewChannel","","A process under this job is attempting to create a new…",20,null],[13,"NewEvent","","A process under this job is attempting to create a new…",20,null],[13,"NewEventPair","","A process under this job is attempting to create a new…",20,null],[13,"NewPort","","A process under this job is attempting to create a new port.",20,null],[13,"NewSocket","","A process under this job is attempting to create a new…",20,null],[13,"NewFIFO","","A process under this job is attempting to create a new fifo.",20,null],[13,"NewTimer","","A process under this job is attempting to create a new…",20,null],[13,"NewProcess","","A process under this job is attempting to create a new…",20,null],[13,"NewProfile","","A process under this job is attempting to create a new…",20,null],[13,"AmbientMarkVMOExec","","A process under this job is attempting to use…",20,null],[4,"PolicyAction","","",null,null],[13,"Allow","","Allow condition.",21,null],[13,"Deny","","Prevent condition.",21,null],[13,"AllowException","","Generate an exception via the debug port. An exception…",21,null],[13,"DenyException","","Just like `AllowException`, but after resuming condition…",21,null],[13,"Kill","","Terminate the process.",21,null],[4,"TimerSlackDefaultMode","","",null,null],[13,"Center","","",22,null],[13,"Early","","",22,null],[13,"Late","","",22,null],[4,"Status","","",null,null],[13,"Init","","",23,null],[13,"Running","","",23,null],[13,"Exited","","",23,null],[11,"root","","Create the root job.",24,[[],["arc"]]],[11,"create_child","","Create a new child job object.",24,[[["arc"],["u32"]],[["zxresult",["arc"]],["arc"]]]],[11,"policy","","Get the policy of the job.",24,[[["self"]],["jobpolicy"]]],[11,"set_policy_basic","","Sets one or more security and/or resource policies to an…",24,[[["self"],["setpolicyoptions"]],["zxresult"]]],[11,"set_policy_timer_slack","","",24,[[["self"],["setpolicyoptions"]]]],[11,"get_action","","Get the action of a policy `condition`.",25,[[["policycondition"],["self"]],[["policyaction"],["option",["policyaction"]]]]],[11,"apply","","Apply a basic policy.",25,[[["self"],["basicpolicy"]]]],[11,"merge","","Merge the policy with `parent`'s.",25,[[["self"]],["self"]]],[11,"create","","Create a new process in the `job`.",26,[[["str"],["arc"],["u32"]],[["zxresult",["arc"]],["arc"]]]],[11,"create_with_ext","","Create a new process with extension info.",26,[[["str"],["arc"]],[["zxresult",["arc"]],["arc"]]]],[11,"start","","Start the first `thread` in the process.",26,[[["arc"],["usize"],["handle"],["self"]],["zxresult"]]],[11,"exit","","Exit current process with `retcode`.",26,[[["i64"],["self"]]]],[11,"check_policy","","Check whether `condition` is allowed in the parent job's…",26,[[["policycondition"],["self"]],["zxresult"]]],[11,"status","","Get process status.",26,[[["self"]],["status"]]],[11,"ext","","Get the extension.",26,[[["self"]],["box"]]],[11,"vmar","","Get the `VmAddressRegion` of the process.",26,[[["self"]],[["arc",["vmaddressregion"]],["vmaddressregion"]]]],[11,"job","","Get the job of the process.",26,[[["self"]],[["job"],["arc",["job"]]]]],[11,"add_handle","","Add a handle to the process",26,[[["handle"],["self"]],["handlevalue"]]],[11,"remove_handle","","Remove a handle from the process",26,[[["handlevalue"],["self"]],["zxresult"]]],[11,"dup_handle","","Duplicate a handle with new `rights`, return the new…",26,[[["handlevalue"],["rights"],["self"]],[["zxresult",["handlevalue"]],["handlevalue"]]]],[11,"get_object_with_rights","","Get the kernel object corresponding to this…",26,[[["handlevalue"],["rights"],["self"]],[["zxresult",["arc"]],["arc"]]]],[11,"get_object","","Get the kernel object corresponding to this `handle_value`",26,[[["handlevalue"],["self"]],[["zxresult",["arc"]],["arc"]]]],[11,"validate_resource","","Try to get Resource and validate it",26,[[["handlevalue"],["self"],["resourcekind"]],["zxresult"]]],[11,"get_vmo_with_rights","","Equal to `get_object_with_rights<dyn VMObject>`.",26,[[["handlevalue"],["rights"],["self"]],[["zxresult",["arc"]],["arc",["vmobject"]]]]],[11,"create","","Create a new thread.",27,[[["str"],["arc"],["u32"]],[["zxresult",["arc"]],["arc"]]]],[11,"create_with_ext","","Create a new thread with extension info.",27,[[["str"],["arc"]],[["zxresult",["arc"]],["arc"]]]],[11,"proc","","Get the process.",27,[[["self"]],["arc"]]],[11,"ext","","Get the extension.",27,[[["self"]],["box"]]],[11,"start","","Start execution on the thread.",27,[[["arc"],["usize"]],["zxresult"]]],[11,"start_with_regs","","Start execution with given registers.",27,[[["arc"],["generalregs"]],["zxresult"]]],[11,"exit","","Terminate the current running thread. TODO: move to…",27,[[["self"]]]],[11,"read_state","","Read one aspect of thread state.",27,[[["threadstatekind"],["self"]],[["zxresult",["usize"]],["usize"]]]],[11,"write_state","","Write one aspect of thread state.",27,[[["threadstatekind"],["self"]],["zxresult"]]],[8,"Task","","Task (Thread, Process, or Job)",null,null],[10,"kill","","Kill the task.",28,[[["self"]],["zxresult"]]],[10,"suspend","","Suspend the task. Currently only thread or process handles…",28,[[["self"]],["zxresult"]]],[10,"create_exception_channel","","Create an exception channel on the task.",28,[[["self"],["u32"]],[["zxresult",["channel"]],["channel"]]]],[10,"resume_from_exception","","Resume the task from a previously caught exception.",28,[[["port"],["self"],["u32"]],["zxresult"]]],[0,"vm","zircon_object","Objects for Virtual Memory Management.",null,null],[3,"MMUFlags","zircon_object::vm","",null,null],[3,"VmAddressRegion","","Virtual Memory Address Regions",null,null],[3,"VmMapping","","Virtual Memory Mapping",null,null],[3,"VMObjectPaged","","The main VM object type, holding a list of pages.",null,null],[3,"VMObjectPhysical","","VMO representing a physical range of memory.",null,null],[5,"pages","","How many pages the `size` needs.",null,[[["usize"]],["usize"]]],[11,"new_root","","Create a new root VMAR.",29,[[],["arc"]]],[11,"create_child_at","","Create a child VMAR at given `offset`.",29,[[["arc"],["usize"]],[["zxresult",["arc"]],["arc"]]]],[11,"create_child","","Create a child VMAR at `offset` with `len`.",29,[[["arc"],["usize"],["option",["usize"]]],[["zxresult",["arc"]],["arc"]]]],[11,"map_at","","Map the `vmo` into this VMAR at given `offset`.",29,[[["vmobject"],["mmuflags"],["usize"],["arc",["vmobject"]],["self"]],["zxresult"]]],[11,"map","","Map the `vmo` into this VMAR.",29,[[["vmobject"],["mmuflags"],["usize"],["arc",["vmobject"]],["option",["usize"]],["self"]],[["virtaddr"],["zxresult",["virtaddr"]]]]],[11,"unmap","","Unmaps all VMO mappings and destroys all sub-regions…",29,[[["virtaddr"],["self"],["usize"]],["zxresult"]]],[11,"protect","","",29,[[["self"]]]],[11,"destroy","","Unmap all mappings within the VMAR, and destroy all…",29,[[["arc"]],["zxresult"]]],[11,"clear","","Unmap all mappings and destroy all sub-regions of VMAR.",29,[[["self"]],["zxresult"]]],[11,"table_phys","","Get physical address of the underlying page table.",29,[[["self"]],["physaddr"]]],[11,"addr","","Get start address of this VMAR.",29,[[["self"]],["usize"]]],[11,"is_dead","","",29,[[["self"]],["bool"]]],[11,"is_alive","","",29,[[["self"]],["bool"]]],[11,"new","","Create a new VMO backing on physical memory allocated in…",30,[[["usize"]],["arc"]]],[11,"new","","Create a new VMO representing a piece of contiguous…",31,[[["physaddr"],["usize"]],["arc"]]],[6,"PhysAddr","","Physical Address",null,null],[6,"VirtAddr","","Virtual Address",null,null],[17,"PAGE_SIZE","","Size of a page",null,null],[8,"VMObject","","Virtual Memory Objects",null,null],[10,"read","","Read memory to `buf` from VMO at `offset`.",32,[[["self"],["usize"]]]],[10,"write","","Write memory from `buf` to VMO at `offset`.",32,[[["self"],["usize"]]]],[10,"len","","Get the length of VMO.",32,[[["self"]],["usize"]]],[10,"set_len","","Set the length of VMO.",32,[[["self"],["usize"]]]],[10,"map_to","","Map physical memory to `page_table`.",32,[[["pagetable"],["virtaddr"],["usize"],["mmuflags"],["self"]]]],[11,"unmap_from","","Unmap physical memory from `page_table`.",32,[[["pagetable"],["virtaddr"],["usize"],["self"]]]],[10,"commit","","Commit allocating physical memory.",32,[[["self"],["usize"]]]],[6,"ZxResult","zircon_object","The type returned by kernel objects methods.",null,null],[14,"impl_kobject","","Macro to auto implement `KernelObject` trait.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"into_any","","",0,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","zircon_object::debuglog","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"into_any","","",1,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",1,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",1,[[["self"]],["any"]]],[11,"as_any_mut","","",1,[[["self"]],["any"]]],[11,"into_any_arc","","",1,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","zircon_object::ipc","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"into_any","","",3,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",3,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",3,[[["self"]],["any"]]],[11,"as_any_mut","","",3,[[["self"]],["any"]]],[11,"into_any_arc","","",3,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_any","","",2,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",2,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",2,[[["self"]],["any"]]],[11,"as_any_mut","","",2,[[["self"]],["any"]]],[11,"into_any_arc","","",2,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","zircon_object::object","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"into_any","","",4,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",4,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",4,[[["self"]],["any"]]],[11,"as_any_mut","","",4,[[["self"]],["any"]]],[11,"into_any_arc","","",4,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"into_any","","",6,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",6,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",6,[[["self"]],["any"]]],[11,"as_any_mut","","",6,[[["self"]],["any"]]],[11,"into_any_arc","","",6,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"into_any","","",7,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",7,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",7,[[["self"]],["any"]]],[11,"as_any_mut","","",7,[[["self"]],["any"]]],[11,"into_any_arc","","",7,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"into_any","","",5,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",5,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",5,[[["self"]],["any"]]],[11,"as_any_mut","","",5,[[["self"]],["any"]]],[11,"into_any_arc","","",5,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"into_any","","",9,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",9,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",9,[[["self"]],["any"]]],[11,"as_any_mut","","",9,[[["self"]],["any"]]],[11,"into_any_arc","","",9,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","zircon_object::resource","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"into_any","","",11,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",11,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",11,[[["self"]],["any"]]],[11,"as_any_mut","","",11,[[["self"]],["any"]]],[11,"into_any_arc","","",11,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"into_any","","",10,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",10,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",10,[[["self"]],["any"]]],[11,"as_any_mut","","",10,[[["self"]],["any"]]],[11,"into_any_arc","","",10,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","zircon_object::signal","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"into_any","","",14,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",14,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",14,[[["self"]],["any"]]],[11,"as_any_mut","","",14,[[["self"]],["any"]]],[11,"into_any_arc","","",14,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"into_any","","",15,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",15,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",15,[[["self"]],["any"]]],[11,"as_any_mut","","",15,[[["self"]],["any"]]],[11,"into_any_arc","","",15,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"into_any","","",16,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",16,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",16,[[["self"]],["any"]]],[11,"as_any_mut","","",16,[[["self"]],["any"]]],[11,"into_any_arc","","",16,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"into_any","","",12,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",12,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",12,[[["self"]],["any"]]],[11,"as_any_mut","","",12,[[["self"]],["any"]]],[11,"into_any_arc","","",12,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"into_any","","",17,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",17,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",17,[[["self"]],["any"]]],[11,"as_any_mut","","",17,[[["self"]],["any"]]],[11,"into_any_arc","","",17,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"into_any","","",13,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",13,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",13,[[["self"]],["any"]]],[11,"as_any_mut","","",13,[[["self"]],["any"]]],[11,"into_any_arc","","",13,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","zircon_object::task","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"into_any","","",24,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",24,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",24,[[["self"]],["any"]]],[11,"as_any_mut","","",24,[[["self"]],["any"]]],[11,"into_any_arc","","",24,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"into_any","","",25,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",25,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",25,[[["self"]],["any"]]],[11,"as_any_mut","","",25,[[["self"]],["any"]]],[11,"into_any_arc","","",25,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"into_any","","",18,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",18,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",18,[[["self"]],["any"]]],[11,"as_any_mut","","",18,[[["self"]],["any"]]],[11,"into_any_arc","","",18,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"into_any","","",33,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",33,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",33,[[["self"]],["any"]]],[11,"as_any_mut","","",33,[[["self"]],["any"]]],[11,"into_any_arc","","",33,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"into_any","","",26,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",26,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",26,[[["self"]],["any"]]],[11,"as_any_mut","","",26,[[["self"]],["any"]]],[11,"into_any_arc","","",26,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"into_any","","",27,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",27,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",27,[[["self"]],["any"]]],[11,"as_any_mut","","",27,[[["self"]],["any"]]],[11,"into_any_arc","","",27,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"into_any","","",19,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",19,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",19,[[["self"]],["any"]]],[11,"as_any_mut","","",19,[[["self"]],["any"]]],[11,"into_any_arc","","",19,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"into_any","","",20,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",20,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",20,[[["self"]],["any"]]],[11,"as_any_mut","","",20,[[["self"]],["any"]]],[11,"into_any_arc","","",20,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"into_any","","",21,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",21,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",21,[[["self"]],["any"]]],[11,"as_any_mut","","",21,[[["self"]],["any"]]],[11,"into_any_arc","","",21,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"into_any","","",22,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",22,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",22,[[["self"]],["any"]]],[11,"as_any_mut","","",22,[[["self"]],["any"]]],[11,"into_any_arc","","",22,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"into_any","","",23,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",23,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",23,[[["self"]],["any"]]],[11,"as_any_mut","","",23,[[["self"]],["any"]]],[11,"into_any_arc","","",23,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","zircon_object::vm","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"into_any","","",34,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",34,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",34,[[["self"]],["any"]]],[11,"as_any_mut","","",34,[[["self"]],["any"]]],[11,"into_any_arc","","",34,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"into_any","","",29,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",29,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",29,[[["self"]],["any"]]],[11,"as_any_mut","","",29,[[["self"]],["any"]]],[11,"into_any_arc","","",29,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"into_any","","",35,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",35,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",35,[[["self"]],["any"]]],[11,"as_any_mut","","",35,[[["self"]],["any"]]],[11,"into_any_arc","","",35,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"into_any","","",30,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",30,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",30,[[["self"]],["any"]]],[11,"as_any_mut","","",30,[[["self"]],["any"]]],[11,"into_any_arc","","",30,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"into_any","","",31,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",31,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",31,[[["self"]],["any"]]],[11,"as_any_mut","","",31,[[["self"]],["any"]]],[11,"into_any_arc","","",31,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"cmp","","",34,[[["mmuflags"],["self"]],["ordering"]]],[11,"eq","","",34,[[["mmuflags"],["self"]],["bool"]]],[11,"ne","","",34,[[["mmuflags"],["self"]],["bool"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",34,[[["mmuflags"]],["mmuflags"]]],[11,"partial_cmp","","",34,[[["mmuflags"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",34,[[["mmuflags"],["self"]],["bool"]]],[11,"le","","",34,[[["mmuflags"],["self"]],["bool"]]],[11,"gt","","",34,[[["mmuflags"],["self"]],["bool"]]],[11,"ge","","",34,[[["mmuflags"],["self"]],["bool"]]],[11,"clone","","",34,[[["self"]],["mmuflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",34,[[["self"],["mmuflags"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",34,[[["mmuflags"]],["mmuflags"]]],[11,"from_iter","","",34,[[["t"]],["mmuflags"]]],[11,"bitor_assign","","Adds the set of flags.",34,[[["self"],["mmuflags"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitor","","Returns the union of the two sets of flags.",34,[[["mmuflags"]],["mmuflags"]]],[11,"extend","","",34,[[["self"],["t"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",34,[[["mmuflags"]],["mmuflags"]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"not","","Returns the complement of this set of flags.",34,[[],["mmuflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",34,[[["self"],["mmuflags"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",34,[[["self"],["mmuflags"]]]],[11,"id","zircon_object::debuglog","",1,[[["self"]],["koid"]]],[11,"type_name","","",1,[[["self"]],["str"]]],[11,"signal","","",1,[[["self"]],["signal"]]],[11,"signal_set","","",1,[[["signal"],["self"]]]],[11,"add_signal_callback","","",1,[[["self"],["signalhandler"]]]],[11,"id","zircon_object","",36,[[["self"]],["koid"]]],[11,"type_name","","",36,[[["self"]],["str"]]],[11,"signal","","",36,[[["self"]],["signal"]]],[11,"signal_set","","",36,[[["signal"],["self"]]]],[11,"add_signal_callback","","",36,[[["self"],["signalhandler"]]]],[11,"id","zircon_object::object","",9,[[["self"]],["koid"]]],[11,"type_name","","",9,[[["self"]],["str"]]],[11,"signal","","",9,[[["self"]],["signal"]]],[11,"signal_set","","",9,[[["signal"],["self"]]]],[11,"add_signal_callback","","",9,[[["self"],["signalhandler"]]]],[11,"id","zircon_object::resource","",11,[[["self"]],["koid"]]],[11,"type_name","","",11,[[["self"]],["str"]]],[11,"signal","","",11,[[["self"]],["signal"]]],[11,"signal_set","","",11,[[["signal"],["self"]]]],[11,"add_signal_callback","","",11,[[["self"],["signalhandler"]]]],[11,"id","zircon_object::signal","",14,[[["self"]],["koid"]]],[11,"type_name","","",14,[[["self"]],["str"]]],[11,"signal","","",14,[[["self"]],["signal"]]],[11,"signal_set","","",14,[[["signal"],["self"]]]],[11,"add_signal_callback","","",14,[[["self"],["signalhandler"]]]],[11,"id","","",15,[[["self"]],["koid"]]],[11,"type_name","","",15,[[["self"]],["str"]]],[11,"signal","","",15,[[["self"]],["signal"]]],[11,"signal_set","","",15,[[["signal"],["self"]]]],[11,"add_signal_callback","","",15,[[["self"],["signalhandler"]]]],[11,"id","","",16,[[["self"]],["koid"]]],[11,"type_name","","",16,[[["self"]],["str"]]],[11,"signal","","",16,[[["self"]],["signal"]]],[11,"signal_set","","",16,[[["signal"],["self"]]]],[11,"add_signal_callback","","",16,[[["self"],["signalhandler"]]]],[11,"id","","",17,[[["self"]],["koid"]]],[11,"type_name","","",17,[[["self"]],["str"]]],[11,"signal","","",17,[[["self"]],["signal"]]],[11,"signal_set","","",17,[[["signal"],["self"]]]],[11,"add_signal_callback","","",17,[[["self"],["signalhandler"]]]],[11,"id","zircon_object::task","",24,[[["self"]],["koid"]]],[11,"type_name","","",24,[[["self"]],["str"]]],[11,"signal","","",24,[[["self"]],["signal"]]],[11,"signal_set","","",24,[[["signal"],["self"]]]],[11,"add_signal_callback","","",24,[[["self"],["signalhandler"]]]],[11,"get_child","","",24,[[["self"],["koid"]],[["arc",["kernelobject"]],["zxresult",["arc"]]]]],[11,"id","","",26,[[["self"]],["koid"]]],[11,"type_name","","",26,[[["self"]],["str"]]],[11,"signal","","",26,[[["self"]],["signal"]]],[11,"signal_set","","",26,[[["signal"],["self"]]]],[11,"add_signal_callback","","",26,[[["self"],["signalhandler"]]]],[11,"get_child","","",26,[[["self"],["koid"]],[["arc",["kernelobject"]],["zxresult",["arc"]]]]],[11,"id","","",27,[[["self"]],["koid"]]],[11,"type_name","","",27,[[["self"]],["str"]]],[11,"signal","","",27,[[["self"]],["signal"]]],[11,"signal_set","","",27,[[["signal"],["self"]]]],[11,"add_signal_callback","","",27,[[["self"],["signalhandler"]]]],[11,"id","zircon_object::vm","",29,[[["self"]],["koid"]]],[11,"type_name","","",29,[[["self"]],["str"]]],[11,"signal","","",29,[[["self"]],["signal"]]],[11,"signal_set","","",29,[[["signal"],["self"]]]],[11,"add_signal_callback","","",29,[[["self"],["signalhandler"]]]],[11,"id","","",30,[[["self"]],["koid"]]],[11,"type_name","","",30,[[["self"]],["str"]]],[11,"signal","","",30,[[["self"]],["signal"]]],[11,"signal_set","","",30,[[["signal"],["self"]]]],[11,"add_signal_callback","","",30,[[["self"],["signalhandler"]]]],[11,"id","","",31,[[["self"]],["koid"]]],[11,"type_name","","",31,[[["self"]],["str"]]],[11,"signal","","",31,[[["self"]],["signal"]]],[11,"signal_set","","",31,[[["signal"],["self"]]]],[11,"add_signal_callback","","",31,[[["self"],["signalhandler"]]]],[11,"read","","",30,[[["self"],["usize"]]]],[11,"write","","",30,[[["self"],["usize"]]]],[11,"len","","",30,[[["self"]],["usize"]]],[11,"set_len","","",30,[[["self"],["usize"]]]],[11,"map_to","","",30,[[["pagetable"],["mmuflags"],["usize"],["self"]]]],[11,"commit","","",30,[[["self"],["usize"]]]],[11,"read","","",31,[[["self"],["usize"]]]],[11,"write","","",31,[[["self"],["usize"]]]],[11,"len","","",31,[[["self"]],["usize"]]],[11,"set_len","","",31,[[["self"],["usize"]]]],[11,"map_to","","",31,[[["pagetable"],["mmuflags"],["usize"],["self"]]]],[11,"commit","","",31,[[["self"],["usize"]]]],[11,"drop","zircon_object::ipc","",3,[[["self"]]]],[11,"drop","zircon_object::signal","",14,[[["self"]]]],[11,"drop","zircon_object::vm","",35,[[["self"]]]],[11,"from","zircon_object","",0,[[["error"]],["self"]]],[11,"fmt","zircon_object::debuglog","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::object","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::resource","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::signal","",14,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::task","",24,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","zircon_object::vm","",29,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"sub","zircon_object::object","Returns the set difference of the two sets of flags.",6,[[["rights"]],["rights"]]],[11,"sub","","Returns the set difference of the two sets of flags.",7,[[["signal"]],["signal"]]],[11,"eq","zircon_object","",0,[[["zxerror"],["self"]],["bool"]]],[11,"eq","zircon_object::object","",6,[[["self"],["rights"]],["bool"]]],[11,"ne","","",6,[[["self"],["rights"]],["bool"]]],[11,"eq","","",7,[[["self"],["signal"]],["bool"]]],[11,"ne","","",7,[[["self"],["signal"]],["bool"]]],[11,"eq","zircon_object::resource","",10,[[["resourcekind"],["self"]],["bool"]]],[11,"eq","zircon_object::signal","",12,[[["self"],["portpacket"]],["bool"]]],[11,"ne","","",12,[[["self"],["portpacket"]],["bool"]]],[11,"eq","","",13,[[["self"],["portpacketpayload"]],["bool"]]],[11,"ne","","",13,[[["self"],["portpacketpayload"]],["bool"]]],[11,"eq","zircon_object::task","",21,[[["self"],["policyaction"]],["bool"]]],[11,"eq","","",23,[[["self"],["status"]],["bool"]]],[11,"ne","","",23,[[["self"],["status"]],["bool"]]],[11,"cmp","zircon_object::object","",6,[[["self"],["rights"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["signal"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["rights"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["self"],["rights"]],["bool"]]],[11,"le","","",6,[[["self"],["rights"]],["bool"]]],[11,"gt","","",6,[[["self"],["rights"]],["bool"]]],[11,"ge","","",6,[[["self"],["rights"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["signal"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",7,[[["self"],["signal"]],["bool"]]],[11,"le","","",7,[[["self"],["signal"]],["bool"]]],[11,"gt","","",7,[[["self"],["signal"]],["bool"]]],[11,"ge","","",7,[[["self"],["signal"]],["bool"]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["rights"],["self"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",7,[[["self"],["signal"]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["rights"]]],[11,"not","","Returns the complement of this set of flags.",7,[[],["signal"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["rights"]],["rights"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",7,[[["signal"]],["signal"]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["rights"]],["rights"]]],[11,"bitor","","Returns the union of the two sets of flags.",7,[[["signal"]],["signal"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["rights"]],["rights"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",7,[[["signal"]],["signal"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["rights"],["self"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",7,[[["self"],["signal"]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["rights"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",7,[[["self"],["signal"]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["rights"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",7,[[["self"],["signal"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"extend","","",6,[[["intoiterator"],["self"]]]],[11,"extend","","",7,[[["self"],["intoiterator"]]]],[11,"from_iter","","",6,[[["intoiterator"]],["rights"]]],[11,"from_iter","","",7,[[["intoiterator"]],["signal"]]],[11,"try_from","","",6,[[["u32"]],["zxresult"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","zircon_object","",0,[[["self"]],["zxerror"]]],[11,"clone","zircon_object::object","",4,[[["self"]],["handle"]]],[11,"clone","","",6,[[["self"]],["rights"]]],[11,"clone","","",7,[[["self"]],["signal"]]],[11,"clone","zircon_object::resource","",10,[[["self"]],["resourcekind"]]],[11,"clone","zircon_object::task","",25,[[["self"]],["jobpolicy"]]],[11,"clone","","",19,[[["self"]],["setpolicyoptions"]]],[11,"clone","","",18,[[["self"]],["basicpolicy"]]],[11,"clone","","",20,[[["self"]],["policycondition"]]],[11,"clone","","",21,[[["self"]],["policyaction"]]],[11,"clone","","",33,[[["self"]],["timerslackpolicy"]]],[11,"clone","","",22,[[["self"]],["timerslackdefaultmode"]]],[11,"clone","","",23,[[["self"]],["status"]]],[11,"default","zircon_object::ipc","",2,[[],["messagepacket"]]],[11,"default","zircon_object::object","",7,[[],["signal"]]],[11,"default","","",5,[[],["self"]]],[11,"default","zircon_object::task","",25,[[],["jobpolicy"]]],[11,"default","","",23,[[],["self"]]],[18,"READ","zircon_object::vm","",34,null],[18,"WRITE","","",34,null],[18,"EXECUTE","","",34,null],[11,"empty","","Returns an empty set of flags",34,[[],["mmuflags"]]],[11,"all","","Returns the set containing all flags.",34,[[],["mmuflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",34,[[["self"]],["usize"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",34,[[["usize"]],[["option",["mmuflags"]],["mmuflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",34,[[["usize"]],["mmuflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",34,[[["usize"]],["mmuflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",34,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",34,[[["self"],["mmuflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",34,[[["self"],["mmuflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",34,[[["self"],["mmuflags"]]]],[11,"remove","","Removes the specified flags in-place.",34,[[["self"],["mmuflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",34,[[["self"],["mmuflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",34,[[["bool"],["self"],["mmuflags"]]]],[11,"unmap_from","","Unmap physical memory from `page_table`.",32,[[["pagetable"],["virtaddr"],["usize"],["self"]]]]],"p":[[4,"ZxError"],[3,"DebugLog"],[3,"MessagePacket"],[3,"Channel_"],[3,"Handle"],[3,"KObjectBase"],[3,"Rights"],[3,"Signal"],[8,"KernelObject"],[3,"DummyObject"],[4,"ResourceKind"],[3,"Resource"],[3,"PortPacket"],[4,"PortPacketPayload"],[3,"EventPair"],[3,"Futex"],[3,"Port"],[3,"Timer"],[3,"BasicPolicy"],[4,"SetPolicyOptions"],[4,"PolicyCondition"],[4,"PolicyAction"],[4,"TimerSlackDefaultMode"],[4,"Status"],[3,"Job"],[3,"JobPolicy"],[3,"Process"],[3,"Thread"],[8,"Task"],[3,"VmAddressRegion"],[3,"VMObjectPaged"],[3,"VMObjectPhysical"],[8,"VMObject"],[3,"TimerSlackPolicy"],[3,"MMUFlags"],[3,"VmMapping"],[6,"Channel"]]};
searchIndex["zircon_syscall"] = {"doc":"Zircon syscall implementations","i":[[3,"Syscall","zircon_syscall","",null,null],[12,"thread","","",0,null],[12,"exit","","",0,null],[11,"sys_channel_read","","Read a message from a channel.",0,[[["useroutptr",["u32"]],["u32"],["useroutptr",["u8"]],["useroutptr",["handlevalue"]],["handlevalue"],["self"],["u8"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_debug_write","","",0,[[["usize"],["userinptr",["u8"]],["self"],["u8"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_debuglog_create","","",0,[[["u32"],["useroutptr",["handlevalue"]],["handlevalue"],["self"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_debuglog_write","","",0,[[["u32"],["usize"],["userinptr",["u8"]],["handlevalue"],["self"],["u8"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_handle_duplicate","","",0,[[["u32"],["useroutptr",["handlevalue"]],["handlevalue"],["self"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_handle_close","","",0,[[["handlevalue"],["self"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_handle_close_many","","",0,[[["userinptr",["handlevalue"]],["usize"],["handlevalue"],["self"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_process_create","","",0,[[["u32"],["userinptr",["u8"]],["usize"],["useroutptr",["handlevalue"]],["handlevalue"],["self"],["u8"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_process_exit","","",0,[[["i64"],["self"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_vmar_allocate","","",0,[[["u32"],["useroutptr",["handlevalue"]],["useroutptr",["usize"]],["usize"],["handlevalue"],["self"],["u64"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_vmo_create","","",0,[[["u32"],["useroutptr",["handlevalue"]],["handlevalue"],["self"],["u64"]],[["zxresult",["usize"]],["usize"]]]],[11,"sys_vmo_read","","",0,[[["u8"],["u64"],["usize"],["handlevalue"],["self"],["useroutptr",["u8"]]],[["zxresult",["usize"]],["usize"]]]],[11,"syscall","","",0,[[["self"],["u32"]],["isize"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"into_any","","",0,[[["box"]],[["box",["any"]],["any"]]]],[11,"into_any_rc","","",0,[[["rc"]],[["rc",["any"]],["any"]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]]],"p":[[3,"Syscall"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);